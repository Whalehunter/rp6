
Bumper en rijden aangepast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006db  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d8  00000000  00000000  00000b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000396  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000351  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000210  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_7>
  20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  8a:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_usart>:
}


// Functions used:
void init_usart(){
	UCSRA = 0; // USART status and control registerA uit
  92:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1 << RXEN); // Enable de USART Reciever
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0); /* 8 data bits, 1 stop bit */
  98:	86 e0       	ldi	r24, 0x06	; 6
  9a:	80 bd       	out	0x20, r24	; 32
	UBRRH = 00;
  9c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12; //baudrade 38.4K. voor robotloader
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	89 b9       	out	0x09, r24	; 9
  a2:	08 95       	ret

000000a4 <leescommand>:
}


int leescommand(){
	int getal;
	while(~UCSRA & (1<<RXC));
  a4:	5f 9b       	sbis	0x0b, 7	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <leescommand>
	getal = UDR;
  a8:	8c b1       	in	r24, 0x0c	; 12
	return getal;
}
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret

000000ae <rijden>:
	getal = UDR;
	return getal;
*/	

void rijden(){
	uint8_t command = leescommand();
  ae:	0e 94 52 00 	call	0xa4	; 0xa4 <leescommand>
	//uint8_t commands = leessnelheid();
	static int laatste_snelheid;
	 int snelheid = laatste_snelheid;
  b2:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
  b6:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__data_end+0x1>
	
	
	if (command == '1')
  ba:	81 33       	cpi	r24, 0x31	; 49
  bc:	39 f4       	brne	.+14     	; 0xcc <rijden+0x1e>
	{
	//	commands = 50;
		laatste_snelheid = 50;
  be:	42 e3       	ldi	r20, 0x32	; 50
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x1>
  c6:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end>
  ca:	12 c0       	rjmp	.+36     	; 0xf0 <rijden+0x42>
	}
	if (command == '2')
  cc:	82 33       	cpi	r24, 0x32	; 50
  ce:	39 f4       	brne	.+14     	; 0xde <rijden+0x30>
	{
		laatste_snelheid = 125;
  d0:	4d e7       	ldi	r20, 0x7D	; 125
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x1>
  d8:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end>
  dc:	16 c0       	rjmp	.+44     	; 0x10a <rijden+0x5c>
	}
	if (command == '3')
  de:	83 33       	cpi	r24, 0x33	; 51
  e0:	39 f4       	brne	.+14     	; 0xf0 <rijden+0x42>
	{
		laatste_snelheid = 150;
  e2:	46 e9       	ldi	r20, 0x96	; 150
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x1>
  ea:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end>
  ee:	16 c0       	rjmp	.+44     	; 0x11c <rijden+0x6e>
	}
	
	
	if(command == 'w') // ga VOORUIT als invoer w is
  f0:	87 37       	cpi	r24, 0x77	; 119
  f2:	59 f4       	brne	.+22     	; 0x10a <rijden+0x5c>
	{
		PORTC &= (1 << PINC2);
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	94 70       	andi	r25, 0x04	; 4
  f8:	95 bb       	out	0x15, r25	; 21
		PORTC &= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  fa:	95 b3       	in	r25, 0x15	; 21
  fc:	98 70       	andi	r25, 0x08	; 8
  fe:	95 bb       	out	0x15, r25	; 21
		OCR1A = snelheid;//dit zet de motoren aan
 100:	3b bd       	out	0x2b, r19	; 43
 102:	2a bd       	out	0x2a, r18	; 42
		OCR1B  = snelheid;
 104:	39 bd       	out	0x29, r19	; 41
 106:	28 bd       	out	0x28, r18	; 40
 108:	12 c0       	rjmp	.+36     	; 0x12e <rijden+0x80>
	}
	
	if (command == 'a') // ga LINKSAF als invoer a is
 10a:	81 36       	cpi	r24, 0x61	; 97
 10c:	39 f4       	brne	.+14     	; 0x11c <rijden+0x6e>
	{
		PORTC |= (1 << PINC2);   //Defined dat hij achteruit gaat
 10e:	aa 9a       	sbi	0x15, 2	; 21
		PORTC &= ~(1 << PINC3);  // |= is achteruit op beide, &= is vooruit
 110:	ab 98       	cbi	0x15, 3	; 21
		OCR1A = snelheid;//dit zet de motoren aan
 112:	3b bd       	out	0x2b, r19	; 43
 114:	2a bd       	out	0x2a, r18	; 42
		OCR1B  = snelheid;
 116:	39 bd       	out	0x29, r19	; 41
 118:	28 bd       	out	0x28, r18	; 40
 11a:	14 c0       	rjmp	.+40     	; 0x144 <rijden+0x96>
	}
	if (command == 's') // ga ACHTERUIT als invoer s is
 11c:	83 37       	cpi	r24, 0x73	; 115
 11e:	39 f4       	brne	.+14     	; 0x12e <rijden+0x80>
	{
		PORTC |= (1 << PINC2);   //Defined dat hij achteruit gaat
 120:	aa 9a       	sbi	0x15, 2	; 21
		PORTC |= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
 122:	ab 9a       	sbi	0x15, 3	; 21
		OCR1A = snelheid;//dit zet de motoren aan
 124:	3b bd       	out	0x2b, r19	; 43
 126:	2a bd       	out	0x2a, r18	; 42
		OCR1B  = snelheid;
 128:	39 bd       	out	0x29, r19	; 41
 12a:	28 bd       	out	0x28, r18	; 40
 12c:	08 95       	ret
	}
	
	if (command == 'd') // ga RECHTSAF als invoer d is
 12e:	84 36       	cpi	r24, 0x64	; 100
 130:	49 f4       	brne	.+18     	; 0x144 <rijden+0x96>
	{
		PORTC &= ~(1 << PINC2);   //Defined dat hij achteruit gaat
 132:	aa 98       	cbi	0x15, 2	; 21
		PORTC |= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
 134:	ab 9a       	sbi	0x15, 3	; 21
		OCR1A = 0x50;//dit zet de motoren aan
 136:	80 e5       	ldi	r24, 0x50	; 80
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9b bd       	out	0x2b, r25	; 43
 13c:	8a bd       	out	0x2a, r24	; 42
		OCR1B  = 0x50;
 13e:	99 bd       	out	0x29, r25	; 41
 140:	88 bd       	out	0x28, r24	; 40
 142:	08 95       	ret
	}
	if (command == 'q') // q for quit
 144:	81 37       	cpi	r24, 0x71	; 113
 146:	21 f4       	brne	.+8      	; 0x150 <rijden+0xa2>
	{
		OCR1B = 0x00; // Uitzetten van de motoren
 148:	19 bc       	out	0x29, r1	; 41
 14a:	18 bc       	out	0x28, r1	; 40
		OCR1A = 0x00;
 14c:	1b bc       	out	0x2b, r1	; 43
 14e:	1a bc       	out	0x2a, r1	; 42
 150:	08 95       	ret

00000152 <timer_counter>:
}


int timer_counter(uint64_t inc) {
	static uint64_t i = 1;
	if (inc)
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__cmpdi2_s8>
 158:	41 f1       	breq	.+80     	; 0x1aa <timer_counter+0x58>
	return i++;
 15a:	f0 91 60 00 	lds	r31, 0x0060	; 0x800060 <__data_start>
 15e:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__data_start+0x1>
 162:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 166:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 16a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_start+0x4>
 16e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_start+0x5>
 172:	2f 2f       	mov	r18, r31
 174:	3e 2f       	mov	r19, r30
 176:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_start+0x6>
 17a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_start+0x7>
 17e:	a1 e0       	ldi	r26, 0x01	; 1
 180:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__adddi3_s8>
 184:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 188:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
 18c:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_start+0x2>
 190:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__data_start+0x3>
 194:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_start+0x4>
 198:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_start+0x5>
 19c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_start+0x6>
 1a0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_start+0x7>
 1a4:	8f 2f       	mov	r24, r31
 1a6:	9e 2f       	mov	r25, r30
 1a8:	08 95       	ret
	return i;
 1aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
}
 1b2:	08 95       	ret

000001b4 <init>:


void init()
{
	sei();
 1b4:	78 94       	sei
	TCNT1 = 0x00;
 1b6:	1d bc       	out	0x2d, r1	; 45
 1b8:	1c bc       	out	0x2c, r1	; 44
	TCCR0 |= (1 << CS00)|(1 << CS01);
 1ba:	83 b7       	in	r24, 0x33	; 51
 1bc:	83 60       	ori	r24, 0x03	; 3
 1be:	83 bf       	out	0x33, r24	; 51

	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM11);
 1c0:	8f b5       	in	r24, 0x2f	; 47
 1c2:	82 6a       	ori	r24, 0xA2	; 162
 1c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13)|(1 << CS10);
 1c6:	8e b5       	in	r24, 0x2e	; 46
 1c8:	81 61       	ori	r24, 0x11	; 17
 1ca:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 0x00FF;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	97 bd       	out	0x27, r25	; 39
 1d2:	86 bd       	out	0x26, r24	; 38
	TIMSK |= (1 << TOIE0);
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	89 bf       	out	0x39, r24	; 57
	DDRC |= (1 << PINC2) | (1 << PINC3);
 1da:	84 b3       	in	r24, 0x14	; 20
 1dc:	8c 60       	ori	r24, 0x0C	; 12
 1de:	84 bb       	out	0x14, r24	; 20
 1e0:	08 95       	ret

000001e2 <main>:



int main (void){
	// Initialisers
	cli();
 1e2:	f8 94       	cli
	init();
 1e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init>
	init_usart();
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <init_usart>
	sei();
 1ec:	78 94       	sei
	
	
	while(1)
	{
		rijden();
 1ee:	0e 94 57 00 	call	0xae	; 0xae <rijden>
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <main+0xc>

000001f4 <__vector_7>:
}



ISR(TIMER1_COMPA_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
timer_counter(1);
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 a9 00 	call	0x152	; 0x152 <timer_counter>
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
timer_counter(1);
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 a9 00 	call	0x152	; 0x152 <timer_counter>
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__adddi3_s8>:
 2a4:	00 24       	eor	r0, r0
 2a6:	a7 fd       	sbrc	r26, 7
 2a8:	00 94       	com	r0
 2aa:	2a 0f       	add	r18, r26
 2ac:	30 1d       	adc	r19, r0
 2ae:	40 1d       	adc	r20, r0
 2b0:	50 1d       	adc	r21, r0
 2b2:	60 1d       	adc	r22, r0
 2b4:	70 1d       	adc	r23, r0
 2b6:	80 1d       	adc	r24, r0
 2b8:	90 1d       	adc	r25, r0
 2ba:	08 95       	ret

000002bc <__cmpdi2_s8>:
 2bc:	00 24       	eor	r0, r0
 2be:	a7 fd       	sbrc	r26, 7
 2c0:	00 94       	com	r0
 2c2:	2a 17       	cp	r18, r26
 2c4:	30 05       	cpc	r19, r0
 2c6:	40 05       	cpc	r20, r0
 2c8:	50 05       	cpc	r21, r0
 2ca:	60 05       	cpc	r22, r0
 2cc:	70 05       	cpc	r23, r0
 2ce:	80 05       	cpc	r24, r0
 2d0:	90 05       	cpc	r25, r0
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
