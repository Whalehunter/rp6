
Bumper en rijden aangepast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000724  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dd  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031a  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_7>
  20:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_8>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 08 01 	call	0x210	; 0x210 <main>
  7a:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_usart>:
}


// Functions used:
void init_usart(){
	UCSRA = 0; // USART status and control registerA uit
  82:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1 << RXEN); // Enable de USART Reciever
  84:	80 e1       	ldi	r24, 0x10	; 16
  86:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0); /* 8 data bits, 1 stop bit */
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 bd       	out	0x20, r24	; 32
	UBRRH = 00;
  8c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12; //baudrade 38.4K. voor robotloader
  8e:	8c e0       	ldi	r24, 0x0C	; 12
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <leescommand>:
}


int leescommand(){
	int getal;
	while(~UCSRA & (1<<RXC));
  94:	5f 9b       	sbis	0x0b, 7	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <leescommand>
	getal = UDR;
  98:	8c b1       	in	r24, 0x0c	; 12
	return getal;
}
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <rijden>:

void rijden(int x){
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	00 d0       	rcall	.+0      	; 0xa8 <rijden+0xa>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	8c 01       	movw	r16, r24
	volatile int command = leescommand();
  ae:	0e 94 4a 00 	call	0x94	; 0x94 <leescommand>
  b2:	9a 83       	std	Y+2, r25	; 0x02
  b4:	89 83       	std	Y+1, r24	; 0x01
	if(command == 'w') // ga VOORUIT als invoer w is
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	87 37       	cpi	r24, 0x77	; 119
  bc:	91 05       	cpc	r25, r1
  be:	51 f4       	brne	.+20     	; 0xd4 <rijden+0x36>
	{
		PORTC &= (1 << PINC2);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	84 70       	andi	r24, 0x04	; 4
  c4:	85 bb       	out	0x15, r24	; 21
		PORTC &= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	88 70       	andi	r24, 0x08	; 8
  ca:	85 bb       	out	0x15, r24	; 21
		OCR1A = x;//dit zet de motoren aan
  cc:	1b bd       	out	0x2b, r17	; 43
  ce:	0a bd       	out	0x2a, r16	; 42
		OCR1B  = x;
  d0:	19 bd       	out	0x29, r17	; 41
  d2:	08 bd       	out	0x28, r16	; 40
	}
	
	if (command == 'a') // ga LINKSAF als invoer a is
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	81 36       	cpi	r24, 0x61	; 97
  da:	91 05       	cpc	r25, r1
  dc:	31 f4       	brne	.+12     	; 0xea <rijden+0x4c>
	{
		PORTC |= (1 << PINC2);   //Defined dat hij achteruit gaat
  de:	aa 9a       	sbi	0x15, 2	; 21
		PORTC &= ~(1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  e0:	ab 98       	cbi	0x15, 3	; 21
		OCR1A = x;//dit zet de motoren aan
  e2:	1b bd       	out	0x2b, r17	; 43
  e4:	0a bd       	out	0x2a, r16	; 42
		OCR1B  = x;
  e6:	19 bd       	out	0x29, r17	; 41
  e8:	08 bd       	out	0x28, r16	; 40
	}
	if (command == 's') // ga ACHTERUIT als invoer s is
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	83 37       	cpi	r24, 0x73	; 115
  f0:	91 05       	cpc	r25, r1
  f2:	31 f4       	brne	.+12     	; 0x100 <rijden+0x62>
	{
		PORTC |= (1 << PINC2);   //Defined dat hij achteruit gaat
  f4:	aa 9a       	sbi	0x15, 2	; 21
		PORTC |= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  f6:	ab 9a       	sbi	0x15, 3	; 21
		OCR1A = x;//dit zet de motoren aan
  f8:	1b bd       	out	0x2b, r17	; 43
  fa:	0a bd       	out	0x2a, r16	; 42
		OCR1B  = x;
  fc:	19 bd       	out	0x29, r17	; 41
  fe:	08 bd       	out	0x28, r16	; 40
	}
	
	if (command == 'd') // ga RECHTSAF als invoer d is
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	84 36       	cpi	r24, 0x64	; 100
 106:	91 05       	cpc	r25, r1
 108:	31 f4       	brne	.+12     	; 0x116 <rijden+0x78>
	{
		PORTC &= ~(1 << PINC2);   //Defined dat hij achteruit gaat
 10a:	aa 98       	cbi	0x15, 2	; 21
		PORTC |= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
 10c:	ab 9a       	sbi	0x15, 3	; 21
		OCR1A = x;//dit zet de motoren aan
 10e:	1b bd       	out	0x2b, r17	; 43
 110:	0a bd       	out	0x2a, r16	; 42
		OCR1B  = x;
 112:	19 bd       	out	0x29, r17	; 41
 114:	08 bd       	out	0x28, r16	; 40
	}
	if (command == 'q') // q for quit
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	81 37       	cpi	r24, 0x71	; 113
 11c:	91 05       	cpc	r25, r1
 11e:	21 f4       	brne	.+8      	; 0x128 <rijden+0x8a>
	{
		OCR1B = 0x00; // Uitzetten van de motoren
 120:	19 bc       	out	0x29, r1	; 41
 122:	18 bc       	out	0x28, r1	; 40
		OCR1A = 0x00;
 124:	1b bc       	out	0x2b, r1	; 43
 126:	1a bc       	out	0x2a, r1	; 42
	}
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <snelheidlees>:

int snelheidlees(){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <snelheidlees+0x6>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	volatile int snelheid = leescommand();
 140:	0e 94 4a 00 	call	0x94	; 0x94 <leescommand>
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
	if (snelheid == 1)
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	59 f0       	breq	.+22     	; 0x166 <snelheidlees+0x30>
	{
		return 50;
	}
	if (snelheid == 2)
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	02 97       	sbiw	r24, 0x02	; 2
 156:	51 f0       	breq	.+20     	; 0x16c <snelheidlees+0x36>
	{
		return 125;
	}
	if (snelheid == 3)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	03 97       	sbiw	r24, 0x03	; 3
 15e:	49 f0       	breq	.+18     	; 0x172 <snelheidlees+0x3c>
	{
		return 180;
	}
	return 0;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <snelheidlees+0x40>

int snelheidlees(){
	volatile int snelheid = leescommand();
	if (snelheid == 1)
	{
		return 50;
 166:	82 e3       	ldi	r24, 0x32	; 50
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	05 c0       	rjmp	.+10     	; 0x176 <snelheidlees+0x40>
	}
	if (snelheid == 2)
	{
		return 125;
 16c:	8d e7       	ldi	r24, 0x7D	; 125
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <snelheidlees+0x40>
	}
	if (snelheid == 3)
	{
		return 180;
 172:	84 eb       	ldi	r24, 0xB4	; 180
 174:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <timer_counter>:

int timer_counter(uint64_t inc) {
	static uint64_t i = 1;
	if (inc)
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	0e 94 80 01 	call	0x300	; 0x300 <__cmpdi2_s8>
 186:	41 f1       	breq	.+80     	; 0x1d8 <timer_counter+0x58>
	return i++;
 188:	f0 91 60 00 	lds	r31, 0x0060	; 0x800060 <__data_start>
 18c:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__data_start+0x1>
 190:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 194:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 198:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_start+0x4>
 19c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_start+0x5>
 1a0:	2f 2f       	mov	r18, r31
 1a2:	3e 2f       	mov	r19, r30
 1a4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_start+0x6>
 1a8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_start+0x7>
 1ac:	a1 e0       	ldi	r26, 0x01	; 1
 1ae:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__adddi3_s8>
 1b2:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 1b6:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
 1ba:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_start+0x2>
 1be:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__data_start+0x3>
 1c2:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_start+0x4>
 1c6:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_start+0x5>
 1ca:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_start+0x6>
 1ce:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_start+0x7>
 1d2:	8f 2f       	mov	r24, r31
 1d4:	9e 2f       	mov	r25, r30
 1d6:	08 95       	ret
	return i;
 1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1dc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
}
 1e0:	08 95       	ret

000001e2 <init>:


void init()
{
	sei();
 1e2:	78 94       	sei
	TCNT1 = 0x00;
 1e4:	1d bc       	out	0x2d, r1	; 45
 1e6:	1c bc       	out	0x2c, r1	; 44
	TCCR0 |= (1 << CS00)|(1 << CS01);
 1e8:	83 b7       	in	r24, 0x33	; 51
 1ea:	83 60       	ori	r24, 0x03	; 3
 1ec:	83 bf       	out	0x33, r24	; 51

	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM11);
 1ee:	8f b5       	in	r24, 0x2f	; 47
 1f0:	82 6a       	ori	r24, 0xA2	; 162
 1f2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13)|(1 << CS10);
 1f4:	8e b5       	in	r24, 0x2e	; 46
 1f6:	81 61       	ori	r24, 0x11	; 17
 1f8:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 0x00FF;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	97 bd       	out	0x27, r25	; 39
 200:	86 bd       	out	0x26, r24	; 38
	TIMSK |= (1 << TOIE0);
 202:	89 b7       	in	r24, 0x39	; 57
 204:	81 60       	ori	r24, 0x01	; 1
 206:	89 bf       	out	0x39, r24	; 57
	DDRC |= (1 << PINC2) | (1 << PINC3);
 208:	84 b3       	in	r24, 0x14	; 20
 20a:	8c 60       	ori	r24, 0x0C	; 12
 20c:	84 bb       	out	0x14, r24	; 20
 20e:	08 95       	ret

00000210 <main>:
void rijden();
int snelheidlees();



int main (void){
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <main+0x6>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	// Initialisers
	cli();
 21a:	f8 94       	cli
	init();
 21c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <init>
	init_usart();
 220:	0e 94 41 00 	call	0x82	; 0x82 <init_usart>
	sei();
 224:	78 94       	sei
	
	
	while(1)
	{
		volatile int snelheid = snelheidlees();
 226:	0e 94 9b 00 	call	0x136	; 0x136 <snelheidlees>
 22a:	9a 83       	std	Y+2, r25	; 0x02
 22c:	89 83       	std	Y+1, r24	; 0x01
		rijden(snelheid);
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	0e 94 4f 00 	call	0x9e	; 0x9e <rijden>
 236:	f7 cf       	rjmp	.-18     	; 0x226 <main+0x16>

00000238 <__vector_7>:
}



ISR(TIMER1_COMPA_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
timer_counter(1);
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 c0 00 	call	0x180	; 0x180 <timer_counter>
}
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	7f 91       	pop	r23
 27c:	6f 91       	pop	r22
 27e:	5f 91       	pop	r21
 280:	4f 91       	pop	r20
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
timer_counter(1);
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 c0 00 	call	0x180	; 0x180 <timer_counter>
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__adddi3_s8>:
 2e8:	00 24       	eor	r0, r0
 2ea:	a7 fd       	sbrc	r26, 7
 2ec:	00 94       	com	r0
 2ee:	2a 0f       	add	r18, r26
 2f0:	30 1d       	adc	r19, r0
 2f2:	40 1d       	adc	r20, r0
 2f4:	50 1d       	adc	r21, r0
 2f6:	60 1d       	adc	r22, r0
 2f8:	70 1d       	adc	r23, r0
 2fa:	80 1d       	adc	r24, r0
 2fc:	90 1d       	adc	r25, r0
 2fe:	08 95       	ret

00000300 <__cmpdi2_s8>:
 300:	00 24       	eor	r0, r0
 302:	a7 fd       	sbrc	r26, 7
 304:	00 94       	com	r0
 306:	2a 17       	cp	r18, r26
 308:	30 05       	cpc	r19, r0
 30a:	40 05       	cpc	r20, r0
 30c:	50 05       	cpc	r21, r0
 30e:	60 05       	cpc	r22, r0
 310:	70 05       	cpc	r23, r0
 312:	80 05       	cpc	r24, r0
 314:	90 05       	cpc	r25, r0
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
