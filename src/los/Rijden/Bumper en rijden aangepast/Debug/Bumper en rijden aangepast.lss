
Bumper en rijden aangepast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000296  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000296  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021b  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_7>
  20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_8>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  7a:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_usart>:
}


// Functions used:
void init_usart(){
	UCSRA = 0; // USART status and control registerA uit
  82:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1 << RXEN); // Enable de USART Reciever
  84:	80 e1       	ldi	r24, 0x10	; 16
  86:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0); /* 8 data bits, 1 stop bit */
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 bd       	out	0x20, r24	; 32
	UBRRH = 00;
  8c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12; //baudrade 38.4K. voor robotloader
  8e:	8c e0       	ldi	r24, 0x0C	; 12
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <leescommand>:
}


int leescommand(){
	int getal;
	while(~UCSRA & (1<<RXC));
  94:	5f 9b       	sbis	0x0b, 7	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <leescommand>
	getal = UDR;
  98:	8c b1       	in	r24, 0x0c	; 12
	return getal;
}
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <rijden>:
	

void rijden(){
	uint8_t command = leescommand();
  9e:	0e 94 4a 00 	call	0x94	; 0x94 <leescommand>
	//uint8_t commands = leessnelheid();
	static int snelheid = 0x50;

	if(command == 'w') // ga VOORUIT als invoer w is
  a2:	87 37       	cpi	r24, 0x77	; 119
  a4:	69 f4       	brne	.+26     	; 0xc0 <rijden+0x22>
	{
		PORTC &= (1 << PINC2);
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	94 70       	andi	r25, 0x04	; 4
  aa:	95 bb       	out	0x15, r25	; 21
		PORTC &= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	98 70       	andi	r25, 0x08	; 8
  b0:	95 bb       	out	0x15, r25	; 21
		OCR1A = snelheid;//dit zet de motoren aan
  b2:	20 e5       	ldi	r18, 0x50	; 80
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	3b bd       	out	0x2b, r19	; 43
  b8:	2a bd       	out	0x2a, r18	; 42
		OCR1B  = snelheid;
  ba:	39 bd       	out	0x29, r19	; 41
  bc:	28 bd       	out	0x28, r18	; 40
  be:	16 c0       	rjmp	.+44     	; 0xec <rijden+0x4e>
	}
	
	if (command == 'a') // ga LINKSAF als invoer a is
  c0:	81 36       	cpi	r24, 0x61	; 97
  c2:	49 f4       	brne	.+18     	; 0xd6 <rijden+0x38>
	{
		PORTC |= (1 << PINC2);   //Defined dat hij achteruit gaat
  c4:	aa 9a       	sbi	0x15, 2	; 21
		PORTC &= ~(1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  c6:	ab 98       	cbi	0x15, 3	; 21
		OCR1A = snelheid;//dit zet de motoren aan
  c8:	20 e5       	ldi	r18, 0x50	; 80
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	3b bd       	out	0x2b, r19	; 43
  ce:	2a bd       	out	0x2a, r18	; 42
		OCR1B  = snelheid;
  d0:	39 bd       	out	0x29, r19	; 41
  d2:	28 bd       	out	0x28, r18	; 40
  d4:	16 c0       	rjmp	.+44     	; 0x102 <rijden+0x64>
	}
	if (command == 's') // ga ACHTERUIT als invoer s is
  d6:	83 37       	cpi	r24, 0x73	; 115
  d8:	49 f4       	brne	.+18     	; 0xec <rijden+0x4e>
	{
		PORTC |= (1 << PINC2);   //Defined dat hij achteruit gaat
  da:	aa 9a       	sbi	0x15, 2	; 21
		PORTC |= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  dc:	ab 9a       	sbi	0x15, 3	; 21
		OCR1A = snelheid;//dit zet de motoren aan
  de:	80 e5       	ldi	r24, 0x50	; 80
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9b bd       	out	0x2b, r25	; 43
  e4:	8a bd       	out	0x2a, r24	; 42
		OCR1B  = snelheid;
  e6:	99 bd       	out	0x29, r25	; 41
  e8:	88 bd       	out	0x28, r24	; 40
  ea:	08 95       	ret
	}
	
	if (command == 'd') // ga RECHTSAF als invoer d is
  ec:	84 36       	cpi	r24, 0x64	; 100
  ee:	49 f4       	brne	.+18     	; 0x102 <rijden+0x64>
	{
		PORTC &= ~(1 << PINC2);   //Defined dat hij achteruit gaat
  f0:	aa 98       	cbi	0x15, 2	; 21
		PORTC |= (1 << PINC3);  // |= is achteruit op beide, &= is vooruit
  f2:	ab 9a       	sbi	0x15, 3	; 21
		OCR1A = snelheid;//dit zet de motoren aan
  f4:	80 e5       	ldi	r24, 0x50	; 80
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	9b bd       	out	0x2b, r25	; 43
  fa:	8a bd       	out	0x2a, r24	; 42
		OCR1B  = snelheid;
  fc:	99 bd       	out	0x29, r25	; 41
  fe:	88 bd       	out	0x28, r24	; 40
 100:	08 95       	ret
	}
	if (command == 'q') // q for quit
 102:	81 37       	cpi	r24, 0x71	; 113
 104:	21 f4       	brne	.+8      	; 0x10e <rijden+0x70>
	{
		OCR1B = 0x00; // Uitzetten van de motoren
 106:	19 bc       	out	0x29, r1	; 41
 108:	18 bc       	out	0x28, r1	; 40
		OCR1A = 0x00;
 10a:	1b bc       	out	0x2b, r1	; 43
 10c:	1a bc       	out	0x2a, r1	; 42
 10e:	08 95       	ret

00000110 <timer_counter>:
}


int timer_counter(uint64_t inc) {
	static uint64_t i = 1;
	if (inc)
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	0e 94 3d 01 	call	0x27a	; 0x27a <__cmpdi2_s8>
 116:	41 f1       	breq	.+80     	; 0x168 <timer_counter+0x58>
	return i++;
 118:	f0 91 60 00 	lds	r31, 0x0060	; 0x800060 <__data_start>
 11c:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__data_start+0x1>
 120:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 124:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 128:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_start+0x4>
 12c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_start+0x5>
 130:	2f 2f       	mov	r18, r31
 132:	3e 2f       	mov	r19, r30
 134:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_start+0x6>
 138:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_start+0x7>
 13c:	a1 e0       	ldi	r26, 0x01	; 1
 13e:	0e 94 31 01 	call	0x262	; 0x262 <__adddi3_s8>
 142:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 146:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
 14a:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_start+0x2>
 14e:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__data_start+0x3>
 152:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_start+0x4>
 156:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_start+0x5>
 15a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_start+0x6>
 15e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_start+0x7>
 162:	8f 2f       	mov	r24, r31
 164:	9e 2f       	mov	r25, r30
 166:	08 95       	ret
	return i;
 168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 16c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
}
 170:	08 95       	ret

00000172 <init>:


void init()
{
	sei();
 172:	78 94       	sei
	TCNT1 = 0x00;
 174:	1d bc       	out	0x2d, r1	; 45
 176:	1c bc       	out	0x2c, r1	; 44
	TCCR0 |= (1 << CS00)|(1 << CS01);
 178:	83 b7       	in	r24, 0x33	; 51
 17a:	83 60       	ori	r24, 0x03	; 3
 17c:	83 bf       	out	0x33, r24	; 51

	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM11);
 17e:	8f b5       	in	r24, 0x2f	; 47
 180:	82 6a       	ori	r24, 0xA2	; 162
 182:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13)|(1 << CS10);
 184:	8e b5       	in	r24, 0x2e	; 46
 186:	81 61       	ori	r24, 0x11	; 17
 188:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 0x00FF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	97 bd       	out	0x27, r25	; 39
 190:	86 bd       	out	0x26, r24	; 38
	TIMSK |= (1 << TOIE0);
 192:	89 b7       	in	r24, 0x39	; 57
 194:	81 60       	ori	r24, 0x01	; 1
 196:	89 bf       	out	0x39, r24	; 57
	DDRC |= (1 << PINC2) | (1 << PINC3);
 198:	84 b3       	in	r24, 0x14	; 20
 19a:	8c 60       	ori	r24, 0x0C	; 12
 19c:	84 bb       	out	0x14, r24	; 20
 19e:	08 95       	ret

000001a0 <main>:



int main (void){
	// Initialisers
	cli();
 1a0:	f8 94       	cli
	init();
 1a2:	0e 94 b9 00 	call	0x172	; 0x172 <init>
	init_usart();
 1a6:	0e 94 41 00 	call	0x82	; 0x82 <init_usart>
	sei();
 1aa:	78 94       	sei
	
	
	while(1)
	{
		rijden();
 1ac:	0e 94 4f 00 	call	0x9e	; 0x9e <rijden>
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <main+0xc>

000001b2 <__vector_7>:
}



ISR(TIMER1_COMPA_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
timer_counter(1);
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 88 00 	call	0x110	; 0x110 <timer_counter>
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
timer_counter(1);
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 88 00 	call	0x110	; 0x110 <timer_counter>
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__adddi3_s8>:
 262:	00 24       	eor	r0, r0
 264:	a7 fd       	sbrc	r26, 7
 266:	00 94       	com	r0
 268:	2a 0f       	add	r18, r26
 26a:	30 1d       	adc	r19, r0
 26c:	40 1d       	adc	r20, r0
 26e:	50 1d       	adc	r21, r0
 270:	60 1d       	adc	r22, r0
 272:	70 1d       	adc	r23, r0
 274:	80 1d       	adc	r24, r0
 276:	90 1d       	adc	r25, r0
 278:	08 95       	ret

0000027a <__cmpdi2_s8>:
 27a:	00 24       	eor	r0, r0
 27c:	a7 fd       	sbrc	r26, 7
 27e:	00 94       	com	r0
 280:	2a 17       	cp	r18, r26
 282:	30 05       	cpc	r19, r0
 284:	40 05       	cpc	r20, r0
 286:	50 05       	cpc	r21, r0
 288:	60 05       	cpc	r22, r0
 28a:	70 05       	cpc	r23, r0
 28c:	80 05       	cpc	r24, r0
 28e:	90 05       	cpc	r25, r0
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
