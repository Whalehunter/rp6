
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000608  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800206  00800206  000006a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b6  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d94  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000786  00000000  00000000  000026fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000669  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000388  00000000  00000000  00003689  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
   2:	00 00       	nop
   4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
   6:	00 00       	nop
   8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
   a:	00 00       	nop
   c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
   e:	00 00       	nop
  10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
  12:	00 00       	nop
  14:	cd c0       	rjmp	.+410    	; 0x1b0 <__bad_interrupt>
  16:	00 00       	nop
  18:	cb c0       	rjmp	.+406    	; 0x1b0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c7 c0       	rjmp	.+398    	; 0x1b0 <__bad_interrupt>
  22:	00 00       	nop
  24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__bad_interrupt>
  26:	00 00       	nop
  28:	c3 c0       	rjmp	.+390    	; 0x1b0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c1 c0       	rjmp	.+386    	; 0x1b0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	bf c0       	rjmp	.+382    	; 0x1b0 <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__bad_interrupt>
  36:	00 00       	nop
  38:	bb c0       	rjmp	.+374    	; 0x1b0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b7 c0       	rjmp	.+366    	; 0x1b0 <__bad_interrupt>
  42:	00 00       	nop
  44:	b5 c0       	rjmp	.+362    	; 0x1b0 <__bad_interrupt>
  46:	00 00       	nop
  48:	b3 c0       	rjmp	.+358    	; 0x1b0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b1 c0       	rjmp	.+354    	; 0x1b0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b0 c0       	rjmp	.+352    	; 0x1b2 <__vector_20>
  52:	00 00       	nop
  54:	ad c0       	rjmp	.+346    	; 0x1b0 <__bad_interrupt>
  56:	00 00       	nop
  58:	ab c0       	rjmp	.+342    	; 0x1b0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a9 c0       	rjmp	.+338    	; 0x1b0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a7 c0       	rjmp	.+334    	; 0x1b0 <__bad_interrupt>
  62:	00 00       	nop
  64:	10 c1       	rjmp	.+544    	; 0x286 <__vector_25>
  66:	00 00       	nop
  68:	a3 c0       	rjmp	.+326    	; 0x1b0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	9f c0       	rjmp	.+318    	; 0x1b0 <__bad_interrupt>
  72:	00 00       	nop
  74:	9d c0       	rjmp	.+314    	; 0x1b0 <__bad_interrupt>
  76:	00 00       	nop
  78:	9b c0       	rjmp	.+310    	; 0x1b0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	99 c0       	rjmp	.+306    	; 0x1b0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	97 c0       	rjmp	.+302    	; 0x1b0 <__bad_interrupt>
  82:	00 00       	nop
  84:	95 c0       	rjmp	.+298    	; 0x1b0 <__bad_interrupt>
  86:	00 00       	nop
  88:	93 c0       	rjmp	.+294    	; 0x1b0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	91 c0       	rjmp	.+290    	; 0x1b0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8f c0       	rjmp	.+286    	; 0x1b0 <__bad_interrupt>
  92:	00 00       	nop
  94:	8d c0       	rjmp	.+282    	; 0x1b0 <__bad_interrupt>
  96:	00 00       	nop
  98:	8b c0       	rjmp	.+278    	; 0x1b0 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	89 c0       	rjmp	.+274    	; 0x1b0 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	87 c0       	rjmp	.+270    	; 0x1b0 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	85 c0       	rjmp	.+266    	; 0x1b0 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	83 c0       	rjmp	.+262    	; 0x1b0 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	81 c0       	rjmp	.+258    	; 0x1b0 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	7f c0       	rjmp	.+254    	; 0x1b0 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	7d c0       	rjmp	.+250    	; 0x1b0 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	7b c0       	rjmp	.+246    	; 0x1b0 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	79 c0       	rjmp	.+242    	; 0x1b0 <__bad_interrupt>
  be:	00 00       	nop
  c0:	77 c0       	rjmp	.+238    	; 0x1b0 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	75 c0       	rjmp	.+234    	; 0x1b0 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	73 c0       	rjmp	.+230    	; 0x1b0 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	71 c0       	rjmp	.+226    	; 0x1b0 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	6f c0       	rjmp	.+222    	; 0x1b0 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	6d c0       	rjmp	.+218    	; 0x1b0 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	6b c0       	rjmp	.+214    	; 0x1b0 <__bad_interrupt>
  da:	00 00       	nop
  dc:	69 c0       	rjmp	.+210    	; 0x1b0 <__bad_interrupt>
  de:	00 00       	nop
  e0:	67 c0       	rjmp	.+206    	; 0x1b0 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	77 01       	movw	r14, r14
  e6:	7b 01       	movw	r14, r22
  e8:	7f 01       	movw	r14, r30
  ea:	96 01       	movw	r18, r12
  ec:	96 01       	movw	r18, r12
  ee:	96 01       	movw	r18, r12
  f0:	96 01       	movw	r18, r12
  f2:	96 01       	movw	r18, r12
  f4:	96 01       	movw	r18, r12
  f6:	96 01       	movw	r18, r12
  f8:	96 01       	movw	r18, r12
  fa:	96 01       	movw	r18, r12
  fc:	96 01       	movw	r18, r12
  fe:	96 01       	movw	r18, r12
 100:	96 01       	movw	r18, r12
 102:	96 01       	movw	r18, r12
 104:	96 01       	movw	r18, r12
 106:	96 01       	movw	r18, r12
 108:	96 01       	movw	r18, r12
 10a:	96 01       	movw	r18, r12
 10c:	96 01       	movw	r18, r12
 10e:	96 01       	movw	r18, r12
 110:	96 01       	movw	r18, r12
 112:	96 01       	movw	r18, r12
 114:	96 01       	movw	r18, r12
 116:	96 01       	movw	r18, r12
 118:	96 01       	movw	r18, r12
 11a:	96 01       	movw	r18, r12
 11c:	96 01       	movw	r18, r12
 11e:	96 01       	movw	r18, r12
 120:	96 01       	movw	r18, r12
 122:	96 01       	movw	r18, r12
 124:	96 01       	movw	r18, r12
 126:	96 01       	movw	r18, r12
 128:	96 01       	movw	r18, r12
 12a:	96 01       	movw	r18, r12
 12c:	96 01       	movw	r18, r12
 12e:	96 01       	movw	r18, r12
 130:	96 01       	movw	r18, r12
 132:	96 01       	movw	r18, r12
 134:	96 01       	movw	r18, r12
 136:	96 01       	movw	r18, r12
 138:	96 01       	movw	r18, r12
 13a:	96 01       	movw	r18, r12
 13c:	96 01       	movw	r18, r12
 13e:	96 01       	movw	r18, r12
 140:	96 01       	movw	r18, r12
 142:	96 01       	movw	r18, r12
 144:	67 01       	movw	r12, r14
 146:	96 01       	movw	r18, r12
 148:	96 01       	movw	r18, r12
 14a:	6f 01       	movw	r12, r30
 14c:	96 01       	movw	r18, r12
 14e:	96 01       	movw	r18, r12
 150:	96 01       	movw	r18, r12
 152:	96 01       	movw	r18, r12
 154:	96 01       	movw	r18, r12
 156:	96 01       	movw	r18, r12
 158:	96 01       	movw	r18, r12
 15a:	96 01       	movw	r18, r12
 15c:	96 01       	movw	r18, r12
 15e:	96 01       	movw	r18, r12
 160:	96 01       	movw	r18, r12
 162:	87 01       	movw	r16, r14
 164:	83 01       	movw	r16, r6
 166:	96 01       	movw	r18, r12
 168:	73 01       	movw	r14, r6
 16a:	96 01       	movw	r18, r12
 16c:	96 01       	movw	r18, r12
 16e:	96 01       	movw	r18, r12
 170:	6b 01       	movw	r12, r22

00000172 <__ctors_end>:
 172:	11 24       	eor	r1, r1
 174:	1f be       	out	0x3f, r1	; 63
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	d1 e2       	ldi	r29, 0x21	; 33
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	cd bf       	out	0x3d, r28	; 61
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
 182:	12 e0       	ldi	r17, 0x02	; 2
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b2 e0       	ldi	r27, 0x02	; 2
 188:	e8 e0       	ldi	r30, 0x08	; 8
 18a:	f6 e0       	ldi	r31, 0x06	; 6
 18c:	00 e0       	ldi	r16, 0x00	; 0
 18e:	0b bf       	out	0x3b, r16	; 59
 190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
 192:	07 90       	elpm	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	a6 30       	cpi	r26, 0x06	; 6
 198:	b1 07       	cpc	r27, r17
 19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
 19c:	22 e0       	ldi	r18, 0x02	; 2
 19e:	a6 e0       	ldi	r26, 0x06	; 6
 1a0:	b2 e0       	ldi	r27, 0x02	; 2
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
 1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
 1a6:	ac 30       	cpi	r26, 0x0C	; 12
 1a8:	b2 07       	cpc	r27, r18
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
 1ac:	b4 d1       	rcall	.+872    	; 0x516 <main>
 1ae:	2a c2       	rjmp	.+1108   	; 0x604 <_exit>

000001b0 <__bad_interrupt>:
 1b0:	27 cf       	rjmp	.-434    	; 0x0 <__vectors>

000001b2 <__vector_20>:
int readADC(int analogInput) {
	ADMUX = (0xf0 & ADMUX) | analogInput;
	ADCSRA |= (1 << ADSC);
	while (~ADCSRA & (1 << ADIF));
	return ADC;
}
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <initUSART>:
 1c6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1ca:	88 e9       	ldi	r24, 0x98	; 152
 1cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 1d6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1da:	87 e6       	ldi	r24, 0x67	; 103
 1dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 1e0:	08 95       	ret

000001e2 <initADC>:
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	80 83       	st	Z, r24
 1ec:	ea e7       	ldi	r30, 0x7A	; 122
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	87 60       	ori	r24, 0x07	; 7
 1f4:	80 83       	st	Z, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	80 83       	st	Z, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	80 65       	ori	r24, 0x50	; 80
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <initMaster>:
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	8b b9       	out	0x0b, r24	; 11
 208:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 20c:	88 e4       	ldi	r24, 0x48	; 72
 20e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 218:	08 95       	ret

0000021a <i2c_start>:
 21a:	84 ea       	ldi	r24, 0xA4	; 164
 21c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 220:	ec eb       	ldi	r30, 0xBC	; 188
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	ec f7       	brge	.-6      	; 0x224 <i2c_start+0xa>
 22a:	08 95       	ret

0000022c <i2c_send_byte>:
 22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 236:	ec eb       	ldi	r30, 0xBC	; 188
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	88 23       	and	r24, r24
 23e:	ec f7       	brge	.-6      	; 0x23a <i2c_send_byte+0xe>
 240:	08 95       	ret

00000242 <i2c_read_nack>:
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 248:	ec eb       	ldi	r30, 0xBC	; 188
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	ec f7       	brge	.-6      	; 0x24c <i2c_read_nack+0xa>
 252:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 256:	08 95       	ret

00000258 <i2c_write>:
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
 25c:	de df       	rcall	.-68     	; 0x21a <i2c_start>
 25e:	80 e7       	ldi	r24, 0x70	; 112
 260:	e5 df       	rcall	.-54     	; 0x22c <i2c_send_byte>
 262:	8c 2f       	mov	r24, r28
 264:	e3 df       	rcall	.-58     	; 0x22c <i2c_send_byte>
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <i2c_read>:
 26a:	d7 df       	rcall	.-82     	; 0x21a <i2c_start>
 26c:	81 e7       	ldi	r24, 0x71	; 113
 26e:	de df       	rcall	.-68     	; 0x22c <i2c_send_byte>
 270:	e8 df       	rcall	.-48     	; 0x242 <i2c_read_nack>
 272:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <y>
 276:	e0 ec       	ldi	r30, 0xC0	; 192
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	90 81       	ld	r25, Z
 27c:	95 ff       	sbrs	r25, 5
 27e:	fd cf       	rjmp	.-6      	; 0x27a <i2c_read+0x10>
 280:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 284:	08 95       	ret

00000286 <__vector_25>:
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	0b b6       	in	r0, 0x3b	; 59
 292:	0f 92       	push	r0
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
 2ac:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2b0:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <x>
 2b4:	82 2f       	mov	r24, r18
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	f1 97       	sbiw	r30, 0x31	; 49
 2bc:	e7 34       	cpi	r30, 0x47	; 71
 2be:	f1 05       	cpc	r31, r1
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <__vector_25+0x3e>
 2c2:	34 c0       	rjmp	.+104    	; 0x32c <__vector_25+0xa6>
 2c4:	88 27       	eor	r24, r24
 2c6:	ee 58       	subi	r30, 0x8E	; 142
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	8f 4f       	sbci	r24, 0xFF	; 255
 2cc:	42 c1       	rjmp	.+644    	; 0x552 <__tablejump2__>
 2ce:	81 e6       	ldi	r24, 0x61	; 97
 2d0:	c3 df       	rcall	.-122    	; 0x258 <i2c_write>
 2d2:	cb df       	rcall	.-106    	; 0x26a <i2c_read>
 2d4:	2d c0       	rjmp	.+90     	; 0x330 <__vector_25+0xaa>
 2d6:	87 e7       	ldi	r24, 0x77	; 119
 2d8:	bf df       	rcall	.-130    	; 0x258 <i2c_write>
 2da:	c7 df       	rcall	.-114    	; 0x26a <i2c_read>
 2dc:	29 c0       	rjmp	.+82     	; 0x330 <__vector_25+0xaa>
 2de:	84 e6       	ldi	r24, 0x64	; 100
 2e0:	bb df       	rcall	.-138    	; 0x258 <i2c_write>
 2e2:	c3 df       	rcall	.-122    	; 0x26a <i2c_read>
 2e4:	25 c0       	rjmp	.+74     	; 0x330 <__vector_25+0xaa>
 2e6:	83 e7       	ldi	r24, 0x73	; 115
 2e8:	b7 df       	rcall	.-146    	; 0x258 <i2c_write>
 2ea:	bf df       	rcall	.-130    	; 0x26a <i2c_read>
 2ec:	21 c0       	rjmp	.+66     	; 0x330 <__vector_25+0xaa>
 2ee:	81 e3       	ldi	r24, 0x31	; 49
 2f0:	b3 df       	rcall	.-154    	; 0x258 <i2c_write>
 2f2:	bb df       	rcall	.-138    	; 0x26a <i2c_read>
 2f4:	1d c0       	rjmp	.+58     	; 0x330 <__vector_25+0xaa>
 2f6:	82 e3       	ldi	r24, 0x32	; 50
 2f8:	af df       	rcall	.-162    	; 0x258 <i2c_write>
 2fa:	b7 df       	rcall	.-146    	; 0x26a <i2c_read>
 2fc:	19 c0       	rjmp	.+50     	; 0x330 <__vector_25+0xaa>
 2fe:	83 e3       	ldi	r24, 0x33	; 51
 300:	ab df       	rcall	.-170    	; 0x258 <i2c_write>
 302:	b3 df       	rcall	.-154    	; 0x26a <i2c_read>
 304:	15 c0       	rjmp	.+42     	; 0x330 <__vector_25+0xaa>
 306:	81 e7       	ldi	r24, 0x71	; 113
 308:	a7 df       	rcall	.-178    	; 0x258 <i2c_write>
 30a:	af df       	rcall	.-162    	; 0x26a <i2c_read>
 30c:	11 c0       	rjmp	.+34     	; 0x330 <__vector_25+0xaa>
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 316:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 31a:	23 2b       	or	r18, r19
 31c:	11 f0       	breq	.+4      	; 0x322 <__vector_25+0x9c>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 326:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 32a:	02 c0       	rjmp	.+4      	; 0x330 <__vector_25+0xaa>
 32c:	82 2f       	mov	r24, r18
 32e:	94 df       	rcall	.-216    	; 0x258 <i2c_write>
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0b be       	out	0x3b, r0	; 59
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <lineFeed>:
	}
	lineFeed();
}

void lineFeed() {
	while (~UCSR0A & (1 << UDRE0));
 356:	e0 ec       	ldi	r30, 0xC0	; 192
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	85 ff       	sbrs	r24, 5
 35e:	fd cf       	rjmp	.-6      	; 0x35a <lineFeed+0x4>
	UDR0 = 0x0D;
 360:	8d e0       	ldi	r24, 0x0D	; 13
 362:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (~UCSR0A & (1 << UDRE0));
 366:	e0 ec       	ldi	r30, 0xC0	; 192
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	85 ff       	sbrs	r24, 5
 36e:	fd cf       	rjmp	.-6      	; 0x36a <lineFeed+0x14>
	UDR0 = 0x0A;
 370:	8a e0       	ldi	r24, 0x0A	; 10
 372:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 376:	08 95       	ret

00000378 <printDistance>:
	ADCSRA |= (1 << ADSC);
	while (~ADCSRA & (1 << ADIF));
	return ADC;
}

void printDistance(uint16_t x) {
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	66 97       	sbiw	r28, 0x16	; 22
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	8c 01       	movw	r16, r24
	char danger[] = {'D','A','N','G','E','R'};
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	e0 e0       	ldi	r30, 0x00	; 0
 396:	f2 e0       	ldi	r31, 0x02	; 2
 398:	de 01       	movw	r26, r28
 39a:	11 96       	adiw	r26, 0x01	; 1
 39c:	01 90       	ld	r0, Z+
 39e:	0d 92       	st	X+, r0
 3a0:	8a 95       	dec	r24
 3a2:	e1 f7       	brne	.-8      	; 0x39c <printDistance+0x24>
	char buffer[16];
	itoa(x, buffer, 10);
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	be 01       	movw	r22, r28
 3aa:	69 5f       	subi	r22, 0xF9	; 249
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	c8 01       	movw	r24, r16
 3b0:	ec d0       	rcall	.+472    	; 0x58a <itoa>
	for (int i = 0; buffer[i] != 0; i++) {
 3b2:	9f 81       	ldd	r25, Y+7	; 0x07
 3b4:	99 23       	and	r25, r25
 3b6:	89 f0       	breq	.+34     	; 0x3da <printDistance+0x62>
 3b8:	ae 01       	movw	r20, r28
 3ba:	48 5f       	subi	r20, 0xF8	; 248
 3bc:	5f 4f       	sbci	r21, 0xFF	; 255
		while (~UCSR0A & (1 << UDRE0));
 3be:	e0 ec       	ldi	r30, 0xC0	; 192
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buffer[i];
 3c2:	26 ec       	ldi	r18, 0xC6	; 198
 3c4:	30 e0       	ldi	r19, 0x00	; 0
void printDistance(uint16_t x) {
	char danger[] = {'D','A','N','G','E','R'};
	char buffer[16];
	itoa(x, buffer, 10);
	for (int i = 0; buffer[i] != 0; i++) {
		while (~UCSR0A & (1 << UDRE0));
 3c6:	80 81       	ld	r24, Z
 3c8:	85 ff       	sbrs	r24, 5
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <printDistance+0x4e>
		UDR0 = buffer[i];
 3cc:	d9 01       	movw	r26, r18
 3ce:	9c 93       	st	X, r25

void printDistance(uint16_t x) {
	char danger[] = {'D','A','N','G','E','R'};
	char buffer[16];
	itoa(x, buffer, 10);
	for (int i = 0; buffer[i] != 0; i++) {
 3d0:	da 01       	movw	r26, r20
 3d2:	9d 91       	ld	r25, X+
 3d4:	ad 01       	movw	r20, r26
 3d6:	91 11       	cpse	r25, r1
 3d8:	f6 cf       	rjmp	.-20     	; 0x3c6 <printDistance+0x4e>
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = buffer[i];
	}
	while (~UCSR0A & (1 << UDRE0));
 3da:	e0 ec       	ldi	r30, 0xC0	; 192
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	85 ff       	sbrs	r24, 5
 3e2:	fd cf       	rjmp	.-6      	; 0x3de <printDistance+0x66>
	UDR0 = 'c';
 3e4:	83 e6       	ldi	r24, 0x63	; 99
 3e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (~UCSR0A & (1 << UDRE0));
 3ea:	e0 ec       	ldi	r30, 0xC0	; 192
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <printDistance+0x76>
	UDR0 = 'm';
 3f4:	8d e6       	ldi	r24, 0x6D	; 109
 3f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	if(x <= 8){
 3fa:	09 30       	cpi	r16, 0x09	; 9
 3fc:	11 05       	cpc	r17, r1
 3fe:	28 f5       	brcc	.+74     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		while (~UCSR0A & (1 << UDRE0));
 400:	e0 ec       	ldi	r30, 0xC0	; 192
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	85 ff       	sbrs	r24, 5
 408:	fd cf       	rjmp	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		UDR0 = '-';
 40a:	8d e2       	ldi	r24, 0x2D	; 45
 40c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		while (~UCSR0A & (1 << UDRE0));
 410:	e0 ec       	ldi	r30, 0xC0	; 192
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	85 ff       	sbrs	r24, 5
 418:	fd cf       	rjmp	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		UDR0 = '-';
 41a:	8d e2       	ldi	r24, 0x2D	; 45
 41c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 420:	be 01       	movw	r22, r28
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	ae 01       	movw	r20, r28
 428:	49 5f       	subi	r20, 0xF9	; 249
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
		for(int y = 0; y < 6; y++){
			while (~UCSR0A & (1 << UDRE0));
 42c:	e0 ec       	ldi	r30, 0xC0	; 192
 42e:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = danger[y];
 430:	26 ec       	ldi	r18, 0xC6	; 198
 432:	30 e0       	ldi	r19, 0x00	; 0
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		for(int y = 0; y < 6; y++){
			while (~UCSR0A & (1 << UDRE0));
 434:	80 81       	ld	r24, Z
 436:	85 ff       	sbrs	r24, 5
 438:	fd cf       	rjmp	.-6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			UDR0 = danger[y];
 43a:	db 01       	movw	r26, r22
 43c:	8d 91       	ld	r24, X+
 43e:	bd 01       	movw	r22, r26
 440:	d9 01       	movw	r26, r18
 442:	8c 93       	st	X, r24
	if(x <= 8){
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		for(int y = 0; y < 6; y++){
 444:	64 17       	cp	r22, r20
 446:	75 07       	cpc	r23, r21
			while (~UCSR0A & (1 << UDRE0));
			UDR0 = danger[y];
		}
	}
	lineFeed();
 448:	a9 f7       	brne	.-22     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 44a:	85 df       	rcall	.-246    	; 0x356 <lineFeed>
}
 44c:	66 96       	adiw	r28, 0x16	; 22
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <sonarSensor>:

void sonarSensor(){
	uint32_t minloops = 0;
	uint32_t maxloops = 400000;

	TCNT1 = 0;
 462:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 466:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 46a:	20 e8       	ldi	r18, 0x80	; 128
 46c:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 128; i++) {
		while (64000 > TCNT1);
 46e:	e4 e8       	ldi	r30, 0x84	; 132
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	91 81       	ldd	r25, Z+1	; 0x01
 476:	81 15       	cp	r24, r1
 478:	9a 4f       	sbci	r25, 0xFA	; 250
 47a:	d8 f3       	brcs	.-10     	; 0x472 <sonarSensor+0x10>
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	31 09       	sbc	r19, r1
void sonarSensor(){
	uint32_t minloops = 0;
	uint32_t maxloops = 400000;

	TCNT1 = 0;
	for (int i = 0; i < 128; i++) {
 480:	c1 f7       	brne	.-16     	; 0x472 <sonarSensor+0x10>
		while (64000 > TCNT1);
	}

	DDRB |= (1 << PB5); // PB5 on output (send pulse)
 482:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~(1 << PB5); // clear PB5
 484:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 486:	8a e0       	ldi	r24, 0x0A	; 10
 488:	8a 95       	dec	r24
 48a:	f1 f7       	brne	.-4      	; 0x488 <sonarSensor+0x26>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <sonarSensor+0x2c>
	_delay_us(2); // _delay_us(2)

	PORTB |= (1 << PB5); // input trigger pulse
 48e:	2d 9a       	sbi	0x05, 5	; 5
 490:	2a e1       	ldi	r18, 0x1A	; 26
 492:	2a 95       	dec	r18
 494:	f1 f7       	brne	.-4      	; 0x492 <sonarSensor+0x30>
 496:	00 c0       	rjmp	.+0      	; 0x498 <sonarSensor+0x36>
	_delay_us(5); // _delay_us(5)

	PORTB &= ~(1 << PB5); // clear PB5
 498:	2d 98       	cbi	0x05, 5	; 5
	DDRB &= ~(1 << PB5); // PB5 on input (listen to pulse echo)
 49a:	25 98       	cbi	0x04, 5	; 4

	while (!(PINB & (1 << PB5))) { // wait until PB5 is high
 49c:	1d 9b       	sbis	0x03, 5	; 3
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <sonarSensor+0x50>
 4a0:	15 c0       	rjmp	.+42     	; 0x4cc <sonarSensor+0x6a>
		if (minloops == maxloops) {
 4a2:	80 38       	cpi	r24, 0x80	; 128
 4a4:	4a e1       	ldi	r20, 0x1A	; 26
 4a6:	94 07       	cpc	r25, r20
 4a8:	46 e0       	ldi	r20, 0x06	; 6
 4aa:	a4 07       	cpc	r26, r20
 4ac:	b1 05       	cpc	r27, r1
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <sonarSensor+0x56>
 4b0:	08 95       	ret
	_delay_us(5); // _delay_us(5)

	PORTB &= ~(1 << PB5); // clear PB5
	DDRB &= ~(1 << PB5); // PB5 on input (listen to pulse echo)

	while (!(PINB & (1 << PB5))) { // wait until PB5 is high
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	dc 01       	movw	r26, r24
		if (minloops == maxloops) {
			break; // return if timeout
		}
		minloops++;
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	a1 1d       	adc	r26, r1
 4bc:	b1 1d       	adc	r27, r1
	_delay_us(5); // _delay_us(5)

	PORTB &= ~(1 << PB5); // clear PB5
	DDRB &= ~(1 << PB5); // PB5 on input (listen to pulse echo)

	while (!(PINB & (1 << PB5))) { // wait until PB5 is high
 4be:	1d 9b       	sbis	0x03, 5	; 3
 4c0:	f0 cf       	rjmp	.-32     	; 0x4a2 <sonarSensor+0x40>
			break; // return if timeout
		}
		minloops++;
	}

	if (minloops < maxloops) {
 4c2:	80 38       	cpi	r24, 0x80	; 128
 4c4:	9a 41       	sbci	r25, 0x1A	; 26
 4c6:	a6 40       	sbci	r26, 0x06	; 6
 4c8:	b1 05       	cpc	r27, r1
 4ca:	20 f5       	brcc	.+72     	; 0x514 <sonarSensor+0xb2>
		TCNT1 = 0;
 4cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 4d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		while ((PINB & (1 << PB5)));
 4d4:	1d 99       	sbic	0x03, 5	; 3
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <sonarSensor+0x72>
		b = (TCNT1);
 4d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 4dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 4e0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <b+0x1>
 4e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <b>
		if (sonar == 1){
 4e8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 4ec:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 4f0:	21 30       	cpi	r18, 0x01	; 1
 4f2:	31 05       	cpc	r19, r1
 4f4:	29 f4       	brne	.+10     	; 0x500 <sonarSensor+0x9e>
			printDistance(b / 15);
 4f6:	6f e0       	ldi	r22, 0x0F	; 15
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	18 d0       	rcall	.+48     	; 0x52c <__divmodhi4>
 4fc:	cb 01       	movw	r24, r22
 4fe:	3c df       	rcall	.-392    	; 0x378 <printDistance>
		}
		if (b / 15 <= 8){
 500:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <b>
 504:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <b+0x1>
 508:	87 38       	cpi	r24, 0x87	; 135
 50a:	91 05       	cpc	r25, r1
			i2c_write('8'); i2c_read();
 50c:	1c f4       	brge	.+6      	; 0x514 <sonarSensor+0xb2>
 50e:	88 e3       	ldi	r24, 0x38	; 56
 510:	a3 de       	rcall	.-698    	; 0x258 <i2c_write>
 512:	ab ce       	rjmp	.-682    	; 0x26a <i2c_read>
 514:	08 95       	ret

00000516 <main>:
int b = 0; // variable used to store distance to object
int sonar = 0;
char x, y;

int main (void) {
	initUSART();
 516:	57 de       	rcall	.-850    	; 0x1c6 <initUSART>
	initADC();
 518:	64 de       	rcall	.-824    	; 0x1e2 <initADC>
	initMaster();
 51a:	74 de       	rcall	.-792    	; 0x204 <initMaster>
 51c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>

	TCCR1A = 0x00;
 520:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = (1 << CS10) | (1 << CS11); // start timer with prescaler 64
 522:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
	sei(); // enable global interrupt
 526:	78 94       	sei
	
	while(1){
		sonarSensor();
 528:	9c df       	rcall	.-200    	; 0x462 <sonarSensor>
 52a:	fe cf       	rjmp	.-4      	; 0x528 <main+0x12>

0000052c <__divmodhi4>:
 52c:	97 fb       	bst	r25, 7
 52e:	07 2e       	mov	r0, r23
 530:	16 f4       	brtc	.+4      	; 0x536 <__divmodhi4+0xa>
 532:	00 94       	com	r0
 534:	06 d0       	rcall	.+12     	; 0x542 <__divmodhi4_neg1>
 536:	77 fd       	sbrc	r23, 7
 538:	08 d0       	rcall	.+16     	; 0x54a <__divmodhi4_neg2>
 53a:	13 d0       	rcall	.+38     	; 0x562 <__udivmodhi4>
 53c:	07 fc       	sbrc	r0, 7
 53e:	05 d0       	rcall	.+10     	; 0x54a <__divmodhi4_neg2>
 540:	3e f4       	brtc	.+14     	; 0x550 <__divmodhi4_exit>

00000542 <__divmodhi4_neg1>:
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__divmodhi4_neg2>:
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255

00000550 <__divmodhi4_exit>:
 550:	08 95       	ret

00000552 <__tablejump2__>:
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	88 1f       	adc	r24, r24
 558:	8b bf       	out	0x3b, r24	; 59
 55a:	07 90       	elpm	r0, Z+
 55c:	f6 91       	elpm	r31, Z
 55e:	e0 2d       	mov	r30, r0
 560:	19 94       	eijmp

00000562 <__udivmodhi4>:
 562:	aa 1b       	sub	r26, r26
 564:	bb 1b       	sub	r27, r27
 566:	51 e1       	ldi	r21, 0x11	; 17
 568:	07 c0       	rjmp	.+14     	; 0x578 <__udivmodhi4_ep>

0000056a <__udivmodhi4_loop>:
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	a6 17       	cp	r26, r22
 570:	b7 07       	cpc	r27, r23
 572:	10 f0       	brcs	.+4      	; 0x578 <__udivmodhi4_ep>
 574:	a6 1b       	sub	r26, r22
 576:	b7 0b       	sbc	r27, r23

00000578 <__udivmodhi4_ep>:
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	5a 95       	dec	r21
 57e:	a9 f7       	brne	.-22     	; 0x56a <__udivmodhi4_loop>
 580:	80 95       	com	r24
 582:	90 95       	com	r25
 584:	bc 01       	movw	r22, r24
 586:	cd 01       	movw	r24, r26
 588:	08 95       	ret

0000058a <itoa>:
 58a:	45 32       	cpi	r20, 0x25	; 37
 58c:	51 05       	cpc	r21, r1
 58e:	18 f4       	brcc	.+6      	; 0x596 <itoa+0xc>
 590:	42 30       	cpi	r20, 0x02	; 2
 592:	08 f0       	brcs	.+2      	; 0x596 <itoa+0xc>
 594:	04 c0       	rjmp	.+8      	; 0x59e <__itoa_ncheck>
 596:	fb 01       	movw	r30, r22
 598:	10 82       	st	Z, r1
 59a:	cb 01       	movw	r24, r22
 59c:	08 95       	ret

0000059e <__itoa_ncheck>:
 59e:	bb 27       	eor	r27, r27
 5a0:	4a 30       	cpi	r20, 0x0A	; 10
 5a2:	31 f4       	brne	.+12     	; 0x5b0 <__itoa_ncheck+0x12>
 5a4:	99 23       	and	r25, r25
 5a6:	22 f4       	brpl	.+8      	; 0x5b0 <__itoa_ncheck+0x12>
 5a8:	bd e2       	ldi	r27, 0x2D	; 45
 5aa:	90 95       	com	r25
 5ac:	81 95       	neg	r24
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <__utoa_common>

000005b2 <__utoa_ncheck>:
 5b2:	bb 27       	eor	r27, r27

000005b4 <__utoa_common>:
 5b4:	fb 01       	movw	r30, r22
 5b6:	55 27       	eor	r21, r21
 5b8:	aa 27       	eor	r26, r26
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	aa 1f       	adc	r26, r26
 5c0:	a4 17       	cp	r26, r20
 5c2:	10 f0       	brcs	.+4      	; 0x5c8 <__utoa_common+0x14>
 5c4:	a4 1b       	sub	r26, r20
 5c6:	83 95       	inc	r24
 5c8:	50 51       	subi	r21, 0x10	; 16
 5ca:	b9 f7       	brne	.-18     	; 0x5ba <__utoa_common+0x6>
 5cc:	a0 5d       	subi	r26, 0xD0	; 208
 5ce:	aa 33       	cpi	r26, 0x3A	; 58
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__utoa_common+0x20>
 5d2:	a9 5d       	subi	r26, 0xD9	; 217
 5d4:	a1 93       	st	Z+, r26
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	79 f7       	brne	.-34     	; 0x5b8 <__utoa_common+0x4>
 5da:	b1 11       	cpse	r27, r1
 5dc:	b1 93       	st	Z+, r27
 5de:	11 92       	st	Z+, r1
 5e0:	cb 01       	movw	r24, r22
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <strrev>

000005e4 <strrev>:
 5e4:	dc 01       	movw	r26, r24
 5e6:	fc 01       	movw	r30, r24
 5e8:	67 2f       	mov	r22, r23
 5ea:	71 91       	ld	r23, Z+
 5ec:	77 23       	and	r23, r23
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <strrev+0x4>
 5f0:	32 97       	sbiw	r30, 0x02	; 2
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <strrev+0x18>
 5f4:	7c 91       	ld	r23, X
 5f6:	6d 93       	st	X+, r22
 5f8:	70 83       	st	Z, r23
 5fa:	62 91       	ld	r22, -Z
 5fc:	ae 17       	cp	r26, r30
 5fe:	bf 07       	cpc	r27, r31
 600:	c8 f3       	brcs	.-14     	; 0x5f4 <strrev+0x10>
 602:	08 95       	ret

00000604 <_exit>:
 604:	f8 94       	cli

00000606 <__stop_program>:
 606:	ff cf       	rjmp	.-2      	; 0x606 <__stop_program>
