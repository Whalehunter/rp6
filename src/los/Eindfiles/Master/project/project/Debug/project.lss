
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000006ba  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800208  00800208  00000756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001253  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db2  00000000  00000000  00001ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000843  00000000  00000000  00002885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000030c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ad  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d1  00000000  00000000  00003955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
   2:	00 00       	nop
   4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
   6:	00 00       	nop
   8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
   a:	00 00       	nop
   c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
   e:	00 00       	nop
  10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
  12:	00 00       	nop
  14:	cd c0       	rjmp	.+410    	; 0x1b0 <__bad_interrupt>
  16:	00 00       	nop
  18:	cb c0       	rjmp	.+406    	; 0x1b0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c7 c0       	rjmp	.+398    	; 0x1b0 <__bad_interrupt>
  22:	00 00       	nop
  24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__bad_interrupt>
  26:	00 00       	nop
  28:	c3 c0       	rjmp	.+390    	; 0x1b0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c1 c0       	rjmp	.+386    	; 0x1b0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	bf c0       	rjmp	.+382    	; 0x1b0 <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__bad_interrupt>
  36:	00 00       	nop
  38:	bb c0       	rjmp	.+374    	; 0x1b0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b7 c0       	rjmp	.+366    	; 0x1b0 <__bad_interrupt>
  42:	00 00       	nop
  44:	b5 c0       	rjmp	.+362    	; 0x1b0 <__bad_interrupt>
  46:	00 00       	nop
  48:	b3 c0       	rjmp	.+358    	; 0x1b0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b1 c0       	rjmp	.+354    	; 0x1b0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b0 c0       	rjmp	.+352    	; 0x1b2 <__vector_20>
  52:	00 00       	nop
  54:	ad c0       	rjmp	.+346    	; 0x1b0 <__bad_interrupt>
  56:	00 00       	nop
  58:	ab c0       	rjmp	.+342    	; 0x1b0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a9 c0       	rjmp	.+338    	; 0x1b0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a7 c0       	rjmp	.+334    	; 0x1b0 <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c2       	rjmp	.+1080   	; 0x49e <__vector_25>
  66:	00 00       	nop
  68:	a3 c0       	rjmp	.+326    	; 0x1b0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	9f c0       	rjmp	.+318    	; 0x1b0 <__bad_interrupt>
  72:	00 00       	nop
  74:	9d c0       	rjmp	.+314    	; 0x1b0 <__bad_interrupt>
  76:	00 00       	nop
  78:	9b c0       	rjmp	.+310    	; 0x1b0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	99 c0       	rjmp	.+306    	; 0x1b0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	7b c2       	rjmp	.+1270   	; 0x578 <__vector_32>
  82:	00 00       	nop
  84:	95 c0       	rjmp	.+298    	; 0x1b0 <__bad_interrupt>
  86:	00 00       	nop
  88:	93 c0       	rjmp	.+294    	; 0x1b0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	91 c0       	rjmp	.+290    	; 0x1b0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8f c0       	rjmp	.+286    	; 0x1b0 <__bad_interrupt>
  92:	00 00       	nop
  94:	8d c0       	rjmp	.+282    	; 0x1b0 <__bad_interrupt>
  96:	00 00       	nop
  98:	8b c0       	rjmp	.+278    	; 0x1b0 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	89 c0       	rjmp	.+274    	; 0x1b0 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	87 c0       	rjmp	.+270    	; 0x1b0 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	85 c0       	rjmp	.+266    	; 0x1b0 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	83 c0       	rjmp	.+262    	; 0x1b0 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	81 c0       	rjmp	.+258    	; 0x1b0 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	7f c0       	rjmp	.+254    	; 0x1b0 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	7d c0       	rjmp	.+250    	; 0x1b0 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	7b c0       	rjmp	.+246    	; 0x1b0 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	79 c0       	rjmp	.+242    	; 0x1b0 <__bad_interrupt>
  be:	00 00       	nop
  c0:	77 c0       	rjmp	.+238    	; 0x1b0 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	75 c0       	rjmp	.+234    	; 0x1b0 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	73 c0       	rjmp	.+230    	; 0x1b0 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	71 c0       	rjmp	.+226    	; 0x1b0 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	6f c0       	rjmp	.+222    	; 0x1b0 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	6d c0       	rjmp	.+218    	; 0x1b0 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	6b c0       	rjmp	.+214    	; 0x1b0 <__bad_interrupt>
  da:	00 00       	nop
  dc:	69 c0       	rjmp	.+210    	; 0x1b0 <__bad_interrupt>
  de:	00 00       	nop
  e0:	67 c0       	rjmp	.+206    	; 0x1b0 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	87 02       	muls	r24, r23
  e6:	8b 02       	muls	r24, r27
  e8:	8f 02       	muls	r24, r31
  ea:	a7 02       	muls	r26, r23
  ec:	a7 02       	muls	r26, r23
  ee:	a7 02       	muls	r26, r23
  f0:	a7 02       	muls	r26, r23
  f2:	a7 02       	muls	r26, r23
  f4:	a7 02       	muls	r26, r23
  f6:	a7 02       	muls	r26, r23
  f8:	a7 02       	muls	r26, r23
  fa:	a7 02       	muls	r26, r23
  fc:	a7 02       	muls	r26, r23
  fe:	a7 02       	muls	r26, r23
 100:	a7 02       	muls	r26, r23
 102:	a7 02       	muls	r26, r23
 104:	a7 02       	muls	r26, r23
 106:	a7 02       	muls	r26, r23
 108:	a7 02       	muls	r26, r23
 10a:	a7 02       	muls	r26, r23
 10c:	a7 02       	muls	r26, r23
 10e:	a7 02       	muls	r26, r23
 110:	a7 02       	muls	r26, r23
 112:	a7 02       	muls	r26, r23
 114:	a7 02       	muls	r26, r23
 116:	a7 02       	muls	r26, r23
 118:	a7 02       	muls	r26, r23
 11a:	a7 02       	muls	r26, r23
 11c:	a7 02       	muls	r26, r23
 11e:	a7 02       	muls	r26, r23
 120:	a7 02       	muls	r26, r23
 122:	a7 02       	muls	r26, r23
 124:	a7 02       	muls	r26, r23
 126:	a7 02       	muls	r26, r23
 128:	a7 02       	muls	r26, r23
 12a:	a7 02       	muls	r26, r23
 12c:	a7 02       	muls	r26, r23
 12e:	a7 02       	muls	r26, r23
 130:	a7 02       	muls	r26, r23
 132:	a7 02       	muls	r26, r23
 134:	a7 02       	muls	r26, r23
 136:	a7 02       	muls	r26, r23
 138:	a7 02       	muls	r26, r23
 13a:	a7 02       	muls	r26, r23
 13c:	a7 02       	muls	r26, r23
 13e:	a7 02       	muls	r26, r23
 140:	a7 02       	muls	r26, r23
 142:	a7 02       	muls	r26, r23
 144:	73 02       	muls	r23, r19
 146:	a7 02       	muls	r26, r23
 148:	a7 02       	muls	r26, r23
 14a:	7d 02       	muls	r23, r29
 14c:	a7 02       	muls	r26, r23
 14e:	a7 02       	muls	r26, r23
 150:	a7 02       	muls	r26, r23
 152:	a7 02       	muls	r26, r23
 154:	a7 02       	muls	r26, r23
 156:	a7 02       	muls	r26, r23
 158:	a7 02       	muls	r26, r23
 15a:	a7 02       	muls	r26, r23
 15c:	a7 02       	muls	r26, r23
 15e:	a7 02       	muls	r26, r23
 160:	a7 02       	muls	r26, r23
 162:	98 02       	muls	r25, r24
 164:	93 02       	muls	r25, r19
 166:	a7 02       	muls	r26, r23
 168:	82 02       	muls	r24, r18
 16a:	a7 02       	muls	r26, r23
 16c:	a7 02       	muls	r26, r23
 16e:	a7 02       	muls	r26, r23
 170:	78 02       	muls	r23, r24

00000172 <__ctors_end>:
 172:	11 24       	eor	r1, r1
 174:	1f be       	out	0x3f, r1	; 63
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	d1 e2       	ldi	r29, 0x21	; 33
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	cd bf       	out	0x3d, r28	; 61
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
 182:	12 e0       	ldi	r17, 0x02	; 2
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b2 e0       	ldi	r27, 0x02	; 2
 188:	ea eb       	ldi	r30, 0xBA	; 186
 18a:	f6 e0       	ldi	r31, 0x06	; 6
 18c:	00 e0       	ldi	r16, 0x00	; 0
 18e:	0b bf       	out	0x3b, r16	; 59
 190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
 192:	07 90       	elpm	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	a8 30       	cpi	r26, 0x08	; 8
 198:	b1 07       	cpc	r27, r17
 19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
 19c:	22 e0       	ldi	r18, 0x02	; 2
 19e:	a8 e0       	ldi	r26, 0x08	; 8
 1a0:	b2 e0       	ldi	r27, 0x02	; 2
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
 1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
 1a6:	ae 30       	cpi	r26, 0x0E	; 14
 1a8:	b2 07       	cpc	r27, r18
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
 1ac:	4c d1       	rcall	.+664    	; 0x446 <main>
 1ae:	83 c2       	rjmp	.+1286   	; 0x6b6 <_exit>

000001b0 <__bad_interrupt>:
 1b0:	27 cf       	rjmp	.-434    	; 0x0 <__vectors>

000001b2 <__vector_20>:
int readADC(int analogInput) {
	ADMUX = (0xf0 & ADMUX) | analogInput;
	ADCSRA |= (1 << ADSC);
	while (~ADCSRA & (1 << ADIF));
	return ADC;
}
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <initUSART>:
 1c6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1ca:	88 e9       	ldi	r24, 0x98	; 152
 1cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 1d6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1da:	87 e6       	ldi	r24, 0x67	; 103
 1dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 1e0:	08 95       	ret

000001e2 <initADC>:
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	80 83       	st	Z, r24
 1ec:	ea e7       	ldi	r30, 0x7A	; 122
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	87 60       	ori	r24, 0x07	; 7
 1f4:	80 83       	st	Z, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	80 83       	st	Z, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	80 65       	ori	r24, 0x50	; 80
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <initMaster>:
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	8b b9       	out	0x0b, r24	; 11
 208:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 20c:	88 e4       	ldi	r24, 0x48	; 72
 20e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 218:	08 95       	ret

0000021a <i2c_start>:
 21a:	84 ea       	ldi	r24, 0xA4	; 164
 21c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 220:	ec eb       	ldi	r30, 0xBC	; 188
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	ec f7       	brge	.-6      	; 0x224 <i2c_start+0xa>
 22a:	08 95       	ret

0000022c <i2c_send_byte>:
 22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 236:	ec eb       	ldi	r30, 0xBC	; 188
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	88 23       	and	r24, r24
 23e:	ec f7       	brge	.-6      	; 0x23a <i2c_send_byte+0xe>
 240:	08 95       	ret

00000242 <i2c_read_nack>:
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 248:	ec eb       	ldi	r30, 0xBC	; 188
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	ec f7       	brge	.-6      	; 0x24c <i2c_read_nack+0xa>
 252:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 256:	08 95       	ret

00000258 <i2c_write>:
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
 25c:	de df       	rcall	.-68     	; 0x21a <i2c_start>
 25e:	80 e7       	ldi	r24, 0x70	; 112
 260:	e5 df       	rcall	.-54     	; 0x22c <i2c_send_byte>
 262:	8c 2f       	mov	r24, r28
 264:	e3 df       	rcall	.-58     	; 0x22c <i2c_send_byte>
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <i2c_read>:
 26a:	d7 df       	rcall	.-82     	; 0x21a <i2c_start>
 26c:	81 e7       	ldi	r24, 0x71	; 113
 26e:	de df       	rcall	.-68     	; 0x22c <i2c_send_byte>
 270:	e8 df       	rcall	.-48     	; 0x242 <i2c_read_nack>
 272:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <y>
 276:	e0 ec       	ldi	r30, 0xC0	; 192
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	90 81       	ld	r25, Z
 27c:	95 ff       	sbrs	r25, 5
 27e:	fd cf       	rjmp	.-6      	; 0x27a <i2c_read+0x10>
 280:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 284:	08 95       	ret

00000286 <lineFeed>:
	}
	lineFeed();
}

void lineFeed() {
	while (~UCSR0A & (1 << UDRE0));
 286:	e0 ec       	ldi	r30, 0xC0	; 192
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	85 ff       	sbrs	r24, 5
 28e:	fd cf       	rjmp	.-6      	; 0x28a <lineFeed+0x4>
	UDR0 = 0x0D;
 290:	8d e0       	ldi	r24, 0x0D	; 13
 292:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (~UCSR0A & (1 << UDRE0));
 296:	e0 ec       	ldi	r30, 0xC0	; 192
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	85 ff       	sbrs	r24, 5
 29e:	fd cf       	rjmp	.-6      	; 0x29a <lineFeed+0x14>
	UDR0 = 0x0A;
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2a6:	08 95       	ret

000002a8 <printDistance>:
	ADCSRA |= (1 << ADSC);
	while (~ADCSRA & (1 << ADIF));
	return ADC;
}

void printDistance(uint16_t x) {
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	66 97       	sbiw	r28, 0x16	; 22
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	8c 01       	movw	r16, r24
	char danger[] = {'D','A','N','G','E','R'};
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	e2 e0       	ldi	r30, 0x02	; 2
 2c6:	f2 e0       	ldi	r31, 0x02	; 2
 2c8:	de 01       	movw	r26, r28
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	8a 95       	dec	r24
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <printDistance+0x24>
	char buffer[16];
	itoa(x, buffer, 10);
 2d4:	4a e0       	ldi	r20, 0x0A	; 10
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	be 01       	movw	r22, r28
 2da:	69 5f       	subi	r22, 0xF9	; 249
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	c8 01       	movw	r24, r16
 2e0:	ad d1       	rcall	.+858    	; 0x63c <itoa>
	for (int i = 0; buffer[i] != 0; i++) {
 2e2:	9f 81       	ldd	r25, Y+7	; 0x07
 2e4:	99 23       	and	r25, r25
 2e6:	89 f0       	breq	.+34     	; 0x30a <printDistance+0x62>
 2e8:	ae 01       	movw	r20, r28
 2ea:	48 5f       	subi	r20, 0xF8	; 248
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
		while (~UCSR0A & (1 << UDRE0));
 2ee:	e0 ec       	ldi	r30, 0xC0	; 192
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buffer[i];
 2f2:	26 ec       	ldi	r18, 0xC6	; 198
 2f4:	30 e0       	ldi	r19, 0x00	; 0
void printDistance(uint16_t x) {
	char danger[] = {'D','A','N','G','E','R'};
	char buffer[16];
	itoa(x, buffer, 10);
	for (int i = 0; buffer[i] != 0; i++) {
		while (~UCSR0A & (1 << UDRE0));
 2f6:	80 81       	ld	r24, Z
 2f8:	85 ff       	sbrs	r24, 5
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <printDistance+0x4e>
		UDR0 = buffer[i];
 2fc:	d9 01       	movw	r26, r18
 2fe:	9c 93       	st	X, r25

void printDistance(uint16_t x) {
	char danger[] = {'D','A','N','G','E','R'};
	char buffer[16];
	itoa(x, buffer, 10);
	for (int i = 0; buffer[i] != 0; i++) {
 300:	da 01       	movw	r26, r20
 302:	9d 91       	ld	r25, X+
 304:	ad 01       	movw	r20, r26
 306:	91 11       	cpse	r25, r1
 308:	f6 cf       	rjmp	.-20     	; 0x2f6 <printDistance+0x4e>
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = buffer[i];
	}
	while (~UCSR0A & (1 << UDRE0));
 30a:	e0 ec       	ldi	r30, 0xC0	; 192
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	85 ff       	sbrs	r24, 5
 312:	fd cf       	rjmp	.-6      	; 0x30e <printDistance+0x66>
	UDR0 = 'c';
 314:	83 e6       	ldi	r24, 0x63	; 99
 316:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (~UCSR0A & (1 << UDRE0));
 31a:	e0 ec       	ldi	r30, 0xC0	; 192
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	85 ff       	sbrs	r24, 5
 322:	fd cf       	rjmp	.-6      	; 0x31e <printDistance+0x76>
	UDR0 = 'm';
 324:	8d e6       	ldi	r24, 0x6D	; 109
 326:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	if(x <= 8){
 32a:	09 30       	cpi	r16, 0x09	; 9
 32c:	11 05       	cpc	r17, r1
 32e:	28 f5       	brcc	.+74     	; 0x37a <printDistance+0xd2>
		while (~UCSR0A & (1 << UDRE0));
 330:	e0 ec       	ldi	r30, 0xC0	; 192
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	85 ff       	sbrs	r24, 5
 338:	fd cf       	rjmp	.-6      	; 0x334 <printDistance+0x8c>
		UDR0 = '-';
 33a:	8d e2       	ldi	r24, 0x2D	; 45
 33c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		while (~UCSR0A & (1 << UDRE0));
 340:	e0 ec       	ldi	r30, 0xC0	; 192
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	85 ff       	sbrs	r24, 5
 348:	fd cf       	rjmp	.-6      	; 0x344 <printDistance+0x9c>
		UDR0 = '-';
 34a:	8d e2       	ldi	r24, 0x2D	; 45
 34c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 350:	be 01       	movw	r22, r28
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	ae 01       	movw	r20, r28
 358:	49 5f       	subi	r20, 0xF9	; 249
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
		for(int y = 0; y < 6; y++){
			while (~UCSR0A & (1 << UDRE0));
 35c:	e0 ec       	ldi	r30, 0xC0	; 192
 35e:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = danger[y];
 360:	26 ec       	ldi	r18, 0xC6	; 198
 362:	30 e0       	ldi	r19, 0x00	; 0
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		for(int y = 0; y < 6; y++){
			while (~UCSR0A & (1 << UDRE0));
 364:	80 81       	ld	r24, Z
 366:	85 ff       	sbrs	r24, 5
 368:	fd cf       	rjmp	.-6      	; 0x364 <printDistance+0xbc>
			UDR0 = danger[y];
 36a:	db 01       	movw	r26, r22
 36c:	8d 91       	ld	r24, X+
 36e:	bd 01       	movw	r22, r26
 370:	d9 01       	movw	r26, r18
 372:	8c 93       	st	X, r24
	if(x <= 8){
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		while (~UCSR0A & (1 << UDRE0));
		UDR0 = '-';
		for(int y = 0; y < 6; y++){
 374:	64 17       	cp	r22, r20
 376:	75 07       	cpc	r23, r21
			while (~UCSR0A & (1 << UDRE0));
			UDR0 = danger[y];
		}
	}
	lineFeed();
 378:	a9 f7       	brne	.-22     	; 0x364 <printDistance+0xbc>
 37a:	85 df       	rcall	.-246    	; 0x286 <lineFeed>
}
 37c:	66 96       	adiw	r28, 0x16	; 22
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <sonarSensor>:

void sonarSensor(){
	uint32_t minloops = 0;
	uint32_t maxloops = 400000;

	TCNT1 = 0;
 392:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 396:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 39a:	20 e8       	ldi	r18, 0x80	; 128
 39c:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 128; i++) {
		while (64000 > TCNT1);
 39e:	e4 e8       	ldi	r30, 0x84	; 132
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	81 15       	cp	r24, r1
 3a8:	9a 4f       	sbci	r25, 0xFA	; 250
 3aa:	d8 f3       	brcs	.-10     	; 0x3a2 <sonarSensor+0x10>
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	31 09       	sbc	r19, r1
void sonarSensor(){
	uint32_t minloops = 0;
	uint32_t maxloops = 400000;

	TCNT1 = 0;
	for (int i = 0; i < 128; i++) {
 3b0:	c1 f7       	brne	.-16     	; 0x3a2 <sonarSensor+0x10>
		while (64000 > TCNT1);
	}

	DDRB |= (1 << PB5); // PB5 on output (send pulse)
 3b2:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~(1 << PB5); // clear PB5
 3b4:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b6:	8a e0       	ldi	r24, 0x0A	; 10
 3b8:	8a 95       	dec	r24
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <sonarSensor+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <sonarSensor+0x2c>
	_delay_us(2); // _delay_us(2)

	PORTB |= (1 << PB5); // input trigger pulse
 3be:	2d 9a       	sbi	0x05, 5	; 5
 3c0:	2a e1       	ldi	r18, 0x1A	; 26
 3c2:	2a 95       	dec	r18
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <sonarSensor+0x30>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <sonarSensor+0x36>
	_delay_us(5); // _delay_us(5)

	PORTB &= ~(1 << PB5); // clear PB5
 3c8:	2d 98       	cbi	0x05, 5	; 5
	DDRB &= ~(1 << PB5); // PB5 on input (listen to pulse echo)
 3ca:	25 98       	cbi	0x04, 5	; 4

	while (!(PINB & (1 << PB5))) { // wait until PB5 is high
 3cc:	1d 9b       	sbis	0x03, 5	; 3
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <sonarSensor+0x50>
 3d0:	15 c0       	rjmp	.+42     	; 0x3fc <sonarSensor+0x6a>
		if (minloops == maxloops) {
 3d2:	80 38       	cpi	r24, 0x80	; 128
 3d4:	4a e1       	ldi	r20, 0x1A	; 26
 3d6:	94 07       	cpc	r25, r20
 3d8:	46 e0       	ldi	r20, 0x06	; 6
 3da:	a4 07       	cpc	r26, r20
 3dc:	b1 05       	cpc	r27, r1
 3de:	21 f4       	brne	.+8      	; 0x3e8 <sonarSensor+0x56>
 3e0:	08 95       	ret
	_delay_us(5); // _delay_us(5)

	PORTB &= ~(1 << PB5); // clear PB5
	DDRB &= ~(1 << PB5); // PB5 on input (listen to pulse echo)

	while (!(PINB & (1 << PB5))) { // wait until PB5 is high
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	dc 01       	movw	r26, r24
		if (minloops == maxloops) {
			break; // return if timeout
		}
		minloops++;
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	a1 1d       	adc	r26, r1
 3ec:	b1 1d       	adc	r27, r1
	_delay_us(5); // _delay_us(5)

	PORTB &= ~(1 << PB5); // clear PB5
	DDRB &= ~(1 << PB5); // PB5 on input (listen to pulse echo)

	while (!(PINB & (1 << PB5))) { // wait until PB5 is high
 3ee:	1d 9b       	sbis	0x03, 5	; 3
 3f0:	f0 cf       	rjmp	.-32     	; 0x3d2 <sonarSensor+0x40>
			break; // return if timeout
		}
		minloops++;
	}

	if (minloops < maxloops) {
 3f2:	80 38       	cpi	r24, 0x80	; 128
 3f4:	9a 41       	sbci	r25, 0x1A	; 26
 3f6:	a6 40       	sbci	r26, 0x06	; 6
 3f8:	b1 05       	cpc	r27, r1
 3fa:	20 f5       	brcc	.+72     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		TCNT1 = 0;
 3fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 400:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		while ((PINB & (1 << PB5)));
 404:	1d 99       	sbic	0x03, 5	; 3
 406:	fe cf       	rjmp	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		b = (TCNT1);
 408:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 40c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 410:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <b+0x1>
 414:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <b>
		if (sonar == 1){
 418:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end>
 41c:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__data_end+0x1>
 420:	21 30       	cpi	r18, 0x01	; 1
 422:	31 05       	cpc	r19, r1
 424:	29 f4       	brne	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			printDistance(b / 15);
 426:	6f e0       	ldi	r22, 0x0F	; 15
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	d9 d0       	rcall	.+434    	; 0x5de <__divmodhi4>
 42c:	cb 01       	movw	r24, r22
 42e:	3c df       	rcall	.-392    	; 0x2a8 <printDistance>
		}
		if (b / 15 <= 8){
 430:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <b>
 434:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <b+0x1>
 438:	87 38       	cpi	r24, 0x87	; 135
 43a:	91 05       	cpc	r25, r1
			i2c_write('8'); i2c_read();
 43c:	1c f4       	brge	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43e:	88 e3       	ldi	r24, 0x38	; 56
 440:	0b df       	rcall	.-490    	; 0x258 <i2c_write>
 442:	13 cf       	rjmp	.-474    	; 0x26a <i2c_read>
 444:	08 95       	ret

00000446 <main>:
int b = 0; // variable used to store distance to object
int sonar = 0;
char x, y;

int main (void) {
	initUSART();
 446:	bf de       	rcall	.-642    	; 0x1c6 <initUSART>
	initADC();
 448:	cc de       	rcall	.-616    	; 0x1e2 <initADC>
	initMaster();
 44a:	dc de       	rcall	.-584    	; 0x204 <initMaster>
 44c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>

	TCCR1A = 0x00;
 450:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = (1 << CS10) | (1 << CS11); // start timer with prescaler 64
 452:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
	sei(); // enable global interrupt
 456:	78 94       	sei
	
	while(1){
		sonarSensor();
 458:	9c df       	rcall	.-200    	; 0x392 <sonarSensor>
 45a:	fe cf       	rjmp	.-4      	; 0x458 <main+0x12>

0000045c <pieper_aan>:
 45c:	24 9a       	sbi	0x04, 4	; 4

void pieper_aan(){
	DDRB |= (1<<PB4); // PORTB op output instellen, PB4 (pin10) is een OCRA pin
	
	//Instellen van de timer2 voor de frequentie/toonhoogte:
	TCCR2A = (1<<COM2A0)| (1<<WGM21); //set oc2a on compare match | WGM on ctc mode
 45e:	82 e4       	ldi	r24, 0x42	; 66
 460:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20); // Stelt de prescaler in op 1024. Dan moet de OCA op 15.
 464:	87 e0       	ldi	r24, 0x07	; 7
 466:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	OCR2A = 8; // OUtput compare ingesteld op
 46a:	88 e0       	ldi	r24, 0x08	; 8
 46c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	
	// Instellen van de 16bit timer3
	TCCR3A = (1<<COM3A1) | (1<<COM3A0) ;
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = (1<<CS32) | (1<<WGM32); // Prescaler op 256
 476:	8c e0       	ldi	r24, 0x0C	; 12
 478:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	OCR3A = 31250; // Output compare on 31250 (500ms)
 47c:	82 e1       	ldi	r24, 0x12	; 18
 47e:	9a e7       	ldi	r25, 0x7A	; 122
 480:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 484:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	TIMSK3 = (1<<OCIE3A);
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 48e:	08 95       	ret

00000490 <pieper_uit>:
}

void pieper_uit(){
	TCCR2B = (1<<CS00); // uitzetten prescalers en dus timers
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	TCCR3B= (1<<CS00);
 496:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	DDRB &= ~(1<<PINB4);
 49a:	24 98       	cbi	0x04, 4	; 4
 49c:	08 95       	ret

0000049e <__vector_25>:

ISR(TIMER1_OVF_vect) {
	// placeholder timer overflow interrupt
}

ISR(USART0_RX_vect){
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	0b b6       	in	r0, 0x3b	; 59
 4aa:	0f 92       	push	r0
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	x = UDR0;
 4c4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 4c8:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <x>
	switch(x){
 4cc:	82 2f       	mov	r24, r18
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	fc 01       	movw	r30, r24
 4d2:	f1 97       	sbiw	r30, 0x31	; 49
 4d4:	e7 34       	cpi	r30, 0x47	; 71
 4d6:	f1 05       	cpc	r31, r1
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__vector_25+0x3e>
 4da:	39 c0       	rjmp	.+114    	; 0x54e <__vector_25+0xb0>
 4dc:	88 27       	eor	r24, r24
 4de:	ee 58       	subi	r30, 0x8E	; 142
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	8f c0       	rjmp	.+286    	; 0x604 <__tablejump2__>
		case 'a':
		i2c_write(x); i2c_read(); pieper_uit(); break;
 4e6:	81 e6       	ldi	r24, 0x61	; 97
 4e8:	b7 de       	rcall	.-658    	; 0x258 <i2c_write>
 4ea:	bf de       	rcall	.-642    	; 0x26a <i2c_read>
 4ec:	d1 df       	rcall	.-94     	; 0x490 <pieper_uit>
 4ee:	31 c0       	rjmp	.+98     	; 0x552 <__vector_25+0xb4>
		case 'w':
		i2c_write(x); i2c_read(); pieper_uit(); break;
 4f0:	87 e7       	ldi	r24, 0x77	; 119
 4f2:	b2 de       	rcall	.-668    	; 0x258 <i2c_write>
 4f4:	ba de       	rcall	.-652    	; 0x26a <i2c_read>
 4f6:	cc df       	rcall	.-104    	; 0x490 <pieper_uit>
 4f8:	2c c0       	rjmp	.+88     	; 0x552 <__vector_25+0xb4>
		case 'd':
		i2c_write(x); i2c_read(); pieper_uit(); break;
 4fa:	84 e6       	ldi	r24, 0x64	; 100
 4fc:	ad de       	rcall	.-678    	; 0x258 <i2c_write>
 4fe:	b5 de       	rcall	.-662    	; 0x26a <i2c_read>
 500:	c7 df       	rcall	.-114    	; 0x490 <pieper_uit>
 502:	27 c0       	rjmp	.+78     	; 0x552 <__vector_25+0xb4>
		case 's':
		i2c_write(x); i2c_read(); pieper_aan(); break;
 504:	83 e7       	ldi	r24, 0x73	; 115
 506:	a8 de       	rcall	.-688    	; 0x258 <i2c_write>
 508:	b0 de       	rcall	.-672    	; 0x26a <i2c_read>
 50a:	a8 df       	rcall	.-176    	; 0x45c <pieper_aan>
 50c:	22 c0       	rjmp	.+68     	; 0x552 <__vector_25+0xb4>
		case '1':
		i2c_write(x); i2c_read(); break;
 50e:	81 e3       	ldi	r24, 0x31	; 49
 510:	a3 de       	rcall	.-698    	; 0x258 <i2c_write>
 512:	ab de       	rcall	.-682    	; 0x26a <i2c_read>
		case '2':
		i2c_write(x); i2c_read(); break;
 514:	1e c0       	rjmp	.+60     	; 0x552 <__vector_25+0xb4>
 516:	82 e3       	ldi	r24, 0x32	; 50
 518:	9f de       	rcall	.-706    	; 0x258 <i2c_write>
 51a:	a7 de       	rcall	.-690    	; 0x26a <i2c_read>
 51c:	1a c0       	rjmp	.+52     	; 0x552 <__vector_25+0xb4>
 51e:	83 e3       	ldi	r24, 0x33	; 51
		case '3':
		i2c_write(x); i2c_read(); break;
 520:	9b de       	rcall	.-714    	; 0x258 <i2c_write>
 522:	a3 de       	rcall	.-698    	; 0x26a <i2c_read>
 524:	16 c0       	rjmp	.+44     	; 0x552 <__vector_25+0xb4>
 526:	81 e7       	ldi	r24, 0x71	; 113
 528:	97 de       	rcall	.-722    	; 0x258 <i2c_write>
 52a:	9f de       	rcall	.-706    	; 0x26a <i2c_read>
		case 'q':
		i2c_write(x); i2c_read(); pieper_uit(); break;
 52c:	b1 df       	rcall	.-158    	; 0x490 <pieper_uit>
 52e:	11 c0       	rjmp	.+34     	; 0x552 <__vector_25+0xb4>
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end>
 538:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__data_end+0x1>
		case 'p':
		sonar = !sonar; break;
 53c:	23 2b       	or	r18, r19
 53e:	11 f0       	breq	.+4      	; 0x544 <__vector_25+0xa6>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 548:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__vector_25+0xb4>
 54e:	82 2f       	mov	r24, r18
 550:	83 de       	rcall	.-762    	; 0x258 <i2c_write>
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	bf 91       	pop	r27
		default:
		i2c_write(x); break;
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
	}
}
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	0f 90       	pop	r0
 56c:	0b be       	out	0x3b, r0	; 59
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <__vector_32>:
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
	TCCR2B = (1<<CS00); // uitzetten prescalers en dus timers
	TCCR3B= (1<<CS00);
	DDRB &= ~(1<<PINB4);
}

ISR(TIMER3_COMPA_vect){
 584:	9f 93       	push	r25
	static bool aan = true;
	static bool temp = true;
	
	if (aan&&temp){
 586:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <aan.2095>
 58a:	88 23       	and	r24, r24
 58c:	71 f0       	breq	.+28     	; 0x5aa <__vector_32+0x32>
 58e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 592:	88 23       	and	r24, r24
 594:	b9 f0       	breq	.+46     	; 0x5c4 <__vector_32+0x4c>
		TCCR2B = (1<<CS00);
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		aan=!aan;
 59c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aan.2095>
 5a0:	89 27       	eor	r24, r25
 5a2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <aan.2095>
	}
	if (!aan&&!temp){
 5a6:	81 11       	cpse	r24, r1
 5a8:	0d c0       	rjmp	.+26     	; 0x5c4 <__vector_32+0x4c>
 5aa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 5ae:	81 11       	cpse	r24, r1
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <__vector_32+0x4c>
		TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);
 5b2:	87 e0       	ldi	r24, 0x07	; 7
 5b4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		aan=!aan;
 5b8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <aan.2095>
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	89 27       	eor	r24, r25
 5c0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <aan.2095>
	}
	temp=!temp;
 5c4:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	89 27       	eor	r24, r25
 5cc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__divmodhi4>:
 5de:	97 fb       	bst	r25, 7
 5e0:	07 2e       	mov	r0, r23
 5e2:	16 f4       	brtc	.+4      	; 0x5e8 <__divmodhi4+0xa>
 5e4:	00 94       	com	r0
 5e6:	06 d0       	rcall	.+12     	; 0x5f4 <__divmodhi4_neg1>
 5e8:	77 fd       	sbrc	r23, 7
 5ea:	08 d0       	rcall	.+16     	; 0x5fc <__divmodhi4_neg2>
 5ec:	13 d0       	rcall	.+38     	; 0x614 <__udivmodhi4>
 5ee:	07 fc       	sbrc	r0, 7
 5f0:	05 d0       	rcall	.+10     	; 0x5fc <__divmodhi4_neg2>
 5f2:	3e f4       	brtc	.+14     	; 0x602 <__divmodhi4_exit>

000005f4 <__divmodhi4_neg1>:
 5f4:	90 95       	com	r25
 5f6:	81 95       	neg	r24
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	08 95       	ret

000005fc <__divmodhi4_neg2>:
 5fc:	70 95       	com	r23
 5fe:	61 95       	neg	r22
 600:	7f 4f       	sbci	r23, 0xFF	; 255

00000602 <__divmodhi4_exit>:
 602:	08 95       	ret

00000604 <__tablejump2__>:
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	88 1f       	adc	r24, r24
 60a:	8b bf       	out	0x3b, r24	; 59
 60c:	07 90       	elpm	r0, Z+
 60e:	f6 91       	elpm	r31, Z
 610:	e0 2d       	mov	r30, r0
 612:	19 94       	eijmp

00000614 <__udivmodhi4>:
 614:	aa 1b       	sub	r26, r26
 616:	bb 1b       	sub	r27, r27
 618:	51 e1       	ldi	r21, 0x11	; 17
 61a:	07 c0       	rjmp	.+14     	; 0x62a <__udivmodhi4_ep>

0000061c <__udivmodhi4_loop>:
 61c:	aa 1f       	adc	r26, r26
 61e:	bb 1f       	adc	r27, r27
 620:	a6 17       	cp	r26, r22
 622:	b7 07       	cpc	r27, r23
 624:	10 f0       	brcs	.+4      	; 0x62a <__udivmodhi4_ep>
 626:	a6 1b       	sub	r26, r22
 628:	b7 0b       	sbc	r27, r23

0000062a <__udivmodhi4_ep>:
 62a:	88 1f       	adc	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	5a 95       	dec	r21
 630:	a9 f7       	brne	.-22     	; 0x61c <__udivmodhi4_loop>
 632:	80 95       	com	r24
 634:	90 95       	com	r25
 636:	bc 01       	movw	r22, r24
 638:	cd 01       	movw	r24, r26
 63a:	08 95       	ret

0000063c <itoa>:
 63c:	45 32       	cpi	r20, 0x25	; 37
 63e:	51 05       	cpc	r21, r1
 640:	18 f4       	brcc	.+6      	; 0x648 <itoa+0xc>
 642:	42 30       	cpi	r20, 0x02	; 2
 644:	08 f0       	brcs	.+2      	; 0x648 <itoa+0xc>
 646:	04 c0       	rjmp	.+8      	; 0x650 <__itoa_ncheck>
 648:	fb 01       	movw	r30, r22
 64a:	10 82       	st	Z, r1
 64c:	cb 01       	movw	r24, r22
 64e:	08 95       	ret

00000650 <__itoa_ncheck>:
 650:	bb 27       	eor	r27, r27
 652:	4a 30       	cpi	r20, 0x0A	; 10
 654:	31 f4       	brne	.+12     	; 0x662 <__itoa_ncheck+0x12>
 656:	99 23       	and	r25, r25
 658:	22 f4       	brpl	.+8      	; 0x662 <__itoa_ncheck+0x12>
 65a:	bd e2       	ldi	r27, 0x2D	; 45
 65c:	90 95       	com	r25
 65e:	81 95       	neg	r24
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	01 c0       	rjmp	.+2      	; 0x666 <__utoa_common>

00000664 <__utoa_ncheck>:
 664:	bb 27       	eor	r27, r27

00000666 <__utoa_common>:
 666:	fb 01       	movw	r30, r22
 668:	55 27       	eor	r21, r21
 66a:	aa 27       	eor	r26, r26
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	aa 1f       	adc	r26, r26
 672:	a4 17       	cp	r26, r20
 674:	10 f0       	brcs	.+4      	; 0x67a <__utoa_common+0x14>
 676:	a4 1b       	sub	r26, r20
 678:	83 95       	inc	r24
 67a:	50 51       	subi	r21, 0x10	; 16
 67c:	b9 f7       	brne	.-18     	; 0x66c <__utoa_common+0x6>
 67e:	a0 5d       	subi	r26, 0xD0	; 208
 680:	aa 33       	cpi	r26, 0x3A	; 58
 682:	08 f0       	brcs	.+2      	; 0x686 <__utoa_common+0x20>
 684:	a9 5d       	subi	r26, 0xD9	; 217
 686:	a1 93       	st	Z+, r26
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	79 f7       	brne	.-34     	; 0x66a <__utoa_common+0x4>
 68c:	b1 11       	cpse	r27, r1
 68e:	b1 93       	st	Z+, r27
 690:	11 92       	st	Z+, r1
 692:	cb 01       	movw	r24, r22
 694:	00 c0       	rjmp	.+0      	; 0x696 <strrev>

00000696 <strrev>:
 696:	dc 01       	movw	r26, r24
 698:	fc 01       	movw	r30, r24
 69a:	67 2f       	mov	r22, r23
 69c:	71 91       	ld	r23, Z+
 69e:	77 23       	and	r23, r23
 6a0:	e1 f7       	brne	.-8      	; 0x69a <strrev+0x4>
 6a2:	32 97       	sbiw	r30, 0x02	; 2
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <strrev+0x18>
 6a6:	7c 91       	ld	r23, X
 6a8:	6d 93       	st	X+, r22
 6aa:	70 83       	st	Z, r23
 6ac:	62 91       	ld	r22, -Z
 6ae:	ae 17       	cp	r26, r30
 6b0:	bf 07       	cpc	r27, r31
 6b2:	c8 f3       	brcs	.-14     	; 0x6a6 <strrev+0x10>
 6b4:	08 95       	ret

000006b6 <_exit>:
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>
