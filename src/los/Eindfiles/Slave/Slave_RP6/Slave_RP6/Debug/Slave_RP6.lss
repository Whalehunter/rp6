
Slave_RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064b  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059d  00000000  00000000  00000973  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000334  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000319  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018d  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_19>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	a1 00       	.word	0x00a1	; ????
  56:	a8 00       	.word	0x00a8	; ????
  58:	af 00       	.word	0x00af	; ????
  5a:	ba 00       	.word	0x00ba	; ????
  5c:	ba 00       	.word	0x00ba	; ????
  5e:	ba 00       	.word	0x00ba	; ????
  60:	ba 00       	.word	0x00ba	; ????
  62:	ba 00       	.word	0x00ba	; ????
  64:	ba 00       	.word	0x00ba	; ????
  66:	ba 00       	.word	0x00ba	; ????
  68:	ba 00       	.word	0x00ba	; ????
  6a:	ba 00       	.word	0x00ba	; ????
  6c:	ba 00       	.word	0x00ba	; ????
  6e:	ba 00       	.word	0x00ba	; ????
  70:	ba 00       	.word	0x00ba	; ????
  72:	ba 00       	.word	0x00ba	; ????
  74:	ba 00       	.word	0x00ba	; ????
  76:	ba 00       	.word	0x00ba	; ????
  78:	ba 00       	.word	0x00ba	; ????
  7a:	ba 00       	.word	0x00ba	; ????
  7c:	ba 00       	.word	0x00ba	; ????
  7e:	ba 00       	.word	0x00ba	; ????
  80:	ba 00       	.word	0x00ba	; ????
  82:	ba 00       	.word	0x00ba	; ????
  84:	ba 00       	.word	0x00ba	; ????
  86:	ba 00       	.word	0x00ba	; ????
  88:	ba 00       	.word	0x00ba	; ????
  8a:	ba 00       	.word	0x00ba	; ????
  8c:	ba 00       	.word	0x00ba	; ????
  8e:	ba 00       	.word	0x00ba	; ????
  90:	ba 00       	.word	0x00ba	; ????
  92:	ba 00       	.word	0x00ba	; ????
  94:	ba 00       	.word	0x00ba	; ????
  96:	ba 00       	.word	0x00ba	; ????
  98:	ba 00       	.word	0x00ba	; ????
  9a:	ba 00       	.word	0x00ba	; ????
  9c:	ba 00       	.word	0x00ba	; ????
  9e:	ba 00       	.word	0x00ba	; ????
  a0:	ba 00       	.word	0x00ba	; ????
  a2:	ba 00       	.word	0x00ba	; ????
  a4:	ba 00       	.word	0x00ba	; ????
  a6:	ba 00       	.word	0x00ba	; ????
  a8:	ba 00       	.word	0x00ba	; ????
  aa:	ba 00       	.word	0x00ba	; ????
  ac:	ba 00       	.word	0x00ba	; ????
  ae:	ba 00       	.word	0x00ba	; ????
  b0:	ba 00       	.word	0x00ba	; ????
  b2:	ba 00       	.word	0x00ba	; ????
  b4:	92 00       	.word	0x0092	; ????
  b6:	ba 00       	.word	0x00ba	; ????
  b8:	ba 00       	.word	0x00ba	; ????
  ba:	9c 00       	.word	0x009c	; ????
  bc:	ba 00       	.word	0x00ba	; ????
  be:	ba 00       	.word	0x00ba	; ????
  c0:	ba 00       	.word	0x00ba	; ????
  c2:	ba 00       	.word	0x00ba	; ????
  c4:	ba 00       	.word	0x00ba	; ????
  c6:	ba 00       	.word	0x00ba	; ????
  c8:	ba 00       	.word	0x00ba	; ????
  ca:	ba 00       	.word	0x00ba	; ????
  cc:	ba 00       	.word	0x00ba	; ????
  ce:	ba 00       	.word	0x00ba	; ????
  d0:	ba 00       	.word	0x00ba	; ????
  d2:	ba 00       	.word	0x00ba	; ????
  d4:	b6 00       	.word	0x00b6	; ????
  d6:	ba 00       	.word	0x00ba	; ????
  d8:	97 00       	.word	0x0097	; ????
  da:	ba 00       	.word	0x00ba	; ????
  dc:	ba 00       	.word	0x00ba	; ????
  de:	ba 00       	.word	0x00ba	; ????
  e0:	8d 00       	.word	0x008d	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf e5       	ldi	r28, 0x5F	; 95
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	0e 94 00 01 	call	0x200	; 0x200 <main>
  f2:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <i2c_slave_init>:
void init_usart(){
    UCSRA = 0; // USART status and control registerA uit
    UCSRB = (1 << RXEN) | (1 << RXCIE); // Enable de USART Reciever
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); /* 8 data bits, 1 stop bit */
    UBRRH = 00;
    UBRRL = 12; //baudrade 38.4K. voor robotloader
  fa:	11 b8       	out	0x01, r1	; 1
  fc:	80 e7       	ldi	r24, 0x70	; 112
  fe:	82 b9       	out	0x02, r24	; 2
 100:	85 e4       	ldi	r24, 0x45	; 69
 102:	86 bf       	out	0x36, r24	; 54
 104:	08 95       	ret

00000106 <rijden>:
}

void rijden (char x) {

    switch(x) {
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	f1 97       	sbiw	r30, 0x31	; 49
 10c:	e7 34       	cpi	r30, 0x47	; 71
 10e:	f1 05       	cpc	r31, r1
 110:	88 f5       	brcc	.+98     	; 0x174 <rijden+0x6e>
 112:	e6 5d       	subi	r30, 0xD6	; 214
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	0c 94 07 01 	jmp	0x20e	; 0x20e <__tablejump2__>
    case 'w':
        PORTC &= ~(1 << PINC2);
 11a:	aa 98       	cbi	0x15, 2	; 21
        PORTC &= ~(1 << PINC3);
 11c:	ab 98       	cbi	0x15, 3	; 21
		TWDR = '^';
 11e:	8e e5       	ldi	r24, 0x5E	; 94
 120:	83 b9       	out	0x03, r24	; 3
        break;
 122:	08 95       	ret
    case 'a':
        PORTC |= (1 << PINC2);
 124:	aa 9a       	sbi	0x15, 2	; 21
        PORTC &= ~(1 << PINC3);
 126:	ab 98       	cbi	0x15, 3	; 21
		TWDR = '<';
 128:	8c e3       	ldi	r24, 0x3C	; 60
 12a:	83 b9       	out	0x03, r24	; 3
        break;
 12c:	08 95       	ret
    case 's':
        PORTC |= (1 << PINC2);
 12e:	aa 9a       	sbi	0x15, 2	; 21
        PORTC |= (1 << PINC3);
 130:	ab 9a       	sbi	0x15, 3	; 21
		TWDR = '.';
 132:	8e e2       	ldi	r24, 0x2E	; 46
 134:	83 b9       	out	0x03, r24	; 3
        break;
 136:	08 95       	ret
    case 'd':
        PORTC &= ~(1 << PINC2);
 138:	aa 98       	cbi	0x15, 2	; 21
        PORTC |= (1 << PINC3);
 13a:	ab 9a       	sbi	0x15, 3	; 21
		TWDR = '>';
 13c:	8e e3       	ldi	r24, 0x3E	; 62
 13e:	83 b9       	out	0x03, r24	; 3
        break;
 140:	08 95       	ret
    case '1':
        OCR1A = 50;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9b bd       	out	0x2b, r25	; 43
 148:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 50;
 14a:	99 bd       	out	0x29, r25	; 41
 14c:	88 bd       	out	0x28, r24	; 40
        break;
 14e:	08 95       	ret
    case '2':
        OCR1A = 125;
 150:	8d e7       	ldi	r24, 0x7D	; 125
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	9b bd       	out	0x2b, r25	; 43
 156:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 125;
 158:	99 bd       	out	0x29, r25	; 41
 15a:	88 bd       	out	0x28, r24	; 40
        break;
 15c:	08 95       	ret
    case '3':
        OCR1A = 150;
 15e:	86 e9       	ldi	r24, 0x96	; 150
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	9b bd       	out	0x2b, r25	; 43
 164:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 150;
 166:	99 bd       	out	0x29, r25	; 41
 168:	88 bd       	out	0x28, r24	; 40
        break;
 16a:	08 95       	ret
    case 'q':
        OCR1A = 0;
 16c:	1b bc       	out	0x2b, r1	; 43
 16e:	1a bc       	out	0x2a, r1	; 42
        OCR1B = 0;
 170:	19 bc       	out	0x29, r1	; 41
 172:	18 bc       	out	0x28, r1	; 40
 174:	08 95       	ret

00000176 <__vector_19>:
			
        }
    return 0;
}

ISR(TWI_vect) {
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	char x,y;

	switch(TWSR) {
 198:	81 b1       	in	r24, 0x01	; 1
 19a:	88 3a       	cpi	r24, 0xA8	; 168
 19c:	31 f0       	breq	.+12     	; 0x1aa <__vector_19+0x34>
 19e:	88 3b       	cpi	r24, 0xB8	; 184
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <__vector_19+0x3c>
 1a2:	80 38       	cpi	r24, 0x80	; 128
 1a4:	49 f4       	brne	.+18     	; 0x1b8 <__vector_19+0x42>
		// Slave Receiver mode
		case 0x60: // Own SLA+W has been received; ACK has been returned
		break;
		case 0x80: // Addressed with own SLA+W; data received; ACK send
		x = TWDR; break; 
 1a6:	83 b1       	in	r24, 0x03	; 3
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <__vector_19+0x42>
		case 0xA0: // A STOP or repeated START condition has been received
		y = x; break;
		// Slave Transmitter mode
		case 0xA8: // Own SLA+R has been received; ACK has been returned
		rijden(y); break;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 83 00 	call	0x106	; 0x106 <rijden>
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <__vector_19+0x42>
		case 0xB8: // Data byte in TWDR has been send; ACK has been received
		rijden(y); break;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 83 00 	call	0x106	; 0x106 <rijden>
		case 0xC0: // Data byte in TWDR has been send; NACK has been received
		y = 0; break;
	}
	TWCR |= (1<<TWINT); // Clear TWINT Flag
 1b8:	86 b7       	in	r24, 0x36	; 54
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	86 bf       	out	0x36, r24	; 54
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <init>:
}


void init()
{
    TCNT1 = 0;
 1e0:	1d bc       	out	0x2d, r1	; 45
 1e2:	1c bc       	out	0x2c, r1	; 44

    TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM11); // set output to high on compare + pwm 9-bit
 1e4:	8f b5       	in	r24, 0x2f	; 47
 1e6:	82 6a       	ori	r24, 0xA2	; 162
 1e8:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13)|(1 << CS10); // no prescaler + pwm, phase & frequency correct
 1ea:	8e b5       	in	r24, 0x2e	; 46
 1ec:	81 61       	ori	r24, 0x11	; 17
 1ee:	8e bd       	out	0x2e, r24	; 46

    ICR1 = 0x00FF; // set interrupt
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	97 bd       	out	0x27, r25	; 39
 1f6:	86 bd       	out	0x26, r24	; 38
    DDRC |= (1 << PINC2) | (1 << PINC3);
 1f8:	84 b3       	in	r24, 0x14	; 20
 1fa:	8c 60       	ori	r24, 0x0C	; 12
 1fc:	84 bb       	out	0x14, r24	; 20
 1fe:	08 95       	ret

00000200 <main>:



int main (void){
    // Initialisers
    cli();
 200:	f8 94       	cli
    init();
 202:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <init>
    //init_usart();
    sei();
 206:	78 94       	sei
	i2c_slave_init();
 208:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_slave_init>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0xc>

0000020e <__tablejump2__>:
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	05 90       	lpm	r0, Z+
 214:	f4 91       	lpm	r31, Z
 216:	e0 2d       	mov	r30, r0
 218:	09 94       	ijmp

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
