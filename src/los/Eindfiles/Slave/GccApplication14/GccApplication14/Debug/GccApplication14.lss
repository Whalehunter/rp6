
GccApplication14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000761  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ca  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000377  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002aa  00000000  00000000  00001acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_10>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	f4 00       	.word	0x00f4	; ????
  56:	fb 00       	.word	0x00fb	; ????
  58:	02 01       	movw	r0, r4
  5a:	13 01       	movw	r2, r6
  5c:	13 01       	movw	r2, r6
  5e:	13 01       	movw	r2, r6
  60:	13 01       	movw	r2, r6
  62:	0d 01       	movw	r0, r26
  64:	13 01       	movw	r2, r6
  66:	13 01       	movw	r2, r6
  68:	13 01       	movw	r2, r6
  6a:	13 01       	movw	r2, r6
  6c:	13 01       	movw	r2, r6
  6e:	13 01       	movw	r2, r6
  70:	13 01       	movw	r2, r6
  72:	13 01       	movw	r2, r6
  74:	13 01       	movw	r2, r6
  76:	13 01       	movw	r2, r6
  78:	13 01       	movw	r2, r6
  7a:	13 01       	movw	r2, r6
  7c:	13 01       	movw	r2, r6
  7e:	13 01       	movw	r2, r6
  80:	13 01       	movw	r2, r6
  82:	13 01       	movw	r2, r6
  84:	13 01       	movw	r2, r6
  86:	13 01       	movw	r2, r6
  88:	13 01       	movw	r2, r6
  8a:	13 01       	movw	r2, r6
  8c:	13 01       	movw	r2, r6
  8e:	13 01       	movw	r2, r6
  90:	13 01       	movw	r2, r6
  92:	13 01       	movw	r2, r6
  94:	13 01       	movw	r2, r6
  96:	13 01       	movw	r2, r6
  98:	13 01       	movw	r2, r6
  9a:	13 01       	movw	r2, r6
  9c:	13 01       	movw	r2, r6
  9e:	13 01       	movw	r2, r6
  a0:	13 01       	movw	r2, r6
  a2:	13 01       	movw	r2, r6
  a4:	13 01       	movw	r2, r6
  a6:	13 01       	movw	r2, r6
  a8:	13 01       	movw	r2, r6
  aa:	13 01       	movw	r2, r6
  ac:	13 01       	movw	r2, r6
  ae:	13 01       	movw	r2, r6
  b0:	13 01       	movw	r2, r6
  b2:	13 01       	movw	r2, r6
  b4:	df 00       	.word	0x00df	; ????
  b6:	13 01       	movw	r2, r6
  b8:	13 01       	movw	r2, r6
  ba:	ed 00       	.word	0x00ed	; ????
  bc:	13 01       	movw	r2, r6
  be:	13 01       	movw	r2, r6
  c0:	13 01       	movw	r2, r6
  c2:	13 01       	movw	r2, r6
  c4:	13 01       	movw	r2, r6
  c6:	13 01       	movw	r2, r6
  c8:	13 01       	movw	r2, r6
  ca:	13 01       	movw	r2, r6
  cc:	13 01       	movw	r2, r6
  ce:	13 01       	movw	r2, r6
  d0:	13 01       	movw	r2, r6
  d2:	13 01       	movw	r2, r6
  d4:	09 01       	movw	r0, r18
  d6:	13 01       	movw	r2, r6
  d8:	e6 00       	.word	0x00e6	; ????
  da:	13 01       	movw	r2, r6
  dc:	13 01       	movw	r2, r6
  de:	13 01       	movw	r2, r6
  e0:	d8 00       	.word	0x00d8	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf e5       	ldi	r28, 0x5F	; 95
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_clear_bss>:
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	a0 e6       	ldi	r26, 0x60	; 96
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a3 36       	cpi	r26, 0x63	; 99
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 9b 00 	call	0x136	; 0x136 <main>
 102:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <i2c_slave_init>:
	DDRB |= 0b10000000; // Stel pb7 in als output
	DDRC |= 0b00010000; // Stel pc4 in als output
	TIMSK = (1<<OCIE0); // Timer overflow interrupt bitje
	TCCR0 |= (1<<COM00) | (1<<WGM01); // Timer control register COM00 - toggle oc0a on compare match | WGM on ctc mode
	TCCR0 |= (1<<CS02) | (1<<CS00); // Stelt de prescaler in op 1024. Dan moet de OCA op 77.
	OCR0 = 77; // OUtput compare ingesteld op 77 (80000/1024)
 10a:	11 b8       	out	0x01, r1	; 1
 10c:	80 e7       	ldi	r24, 0x70	; 112
 10e:	82 b9       	out	0x02, r24	; 2
 110:	85 e4       	ldi	r24, 0x45	; 69
 112:	86 bf       	out	0x36, r24	; 54
 114:	08 95       	ret

00000116 <init>:
 116:	1d bc       	out	0x2d, r1	; 45
 118:	1c bc       	out	0x2c, r1	; 44
 11a:	8f b5       	in	r24, 0x2f	; 47
 11c:	82 6a       	ori	r24, 0xA2	; 162
 11e:	8f bd       	out	0x2f, r24	; 47
 120:	8e b5       	in	r24, 0x2e	; 46
 122:	81 61       	ori	r24, 0x11	; 17
 124:	8e bd       	out	0x2e, r24	; 46
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	97 bd       	out	0x27, r25	; 39
 12c:	86 bd       	out	0x26, r24	; 38
 12e:	84 b3       	in	r24, 0x14	; 20
 130:	8c 60       	ori	r24, 0x0C	; 12
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret

00000136 <main>:
 136:	f8 94       	cli
 138:	0e 94 8b 00 	call	0x116	; 0x116 <init>
 13c:	78 94       	sei
 13e:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_slave_init>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0xc>

00000144 <knipper_licht_uit>:
}


void knipper_licht_uit() {
	/* Links uit */
	PORTB &= ~(1<<PINB7);
 144:	c7 98       	cbi	0x18, 7	; 24
	/* Rechts uit */
	PORTC &= ~(1<<PINC4);
 146:	ac 98       	cbi	0x15, 4	; 21
 148:	08 95       	ret

0000014a <timert>:

uint8_t timert(int x)
{
	static uint8_t delay = 0;

	if (x) {
 14a:	89 2b       	or	r24, r25
 14c:	39 f0       	breq	.+14     	; 0x15c <timert+0x12>
		delay++;
 14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		} else if (delay >= DELAYWAARDE) {
		delay = 0;
		return 1;
	}

	return 0;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret
{
	static uint8_t delay = 0;

	if (x) {
		delay++;
		} else if (delay >= DELAYWAARDE) {
 15c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 160:	84 31       	cpi	r24, 0x14	; 20
 162:	20 f0       	brcs	.+8      	; 0x16c <timert+0x22>
		delay = 0;
 164:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		return 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret
	}

	return 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
}
 16e:	08 95       	ret

00000170 <toggle_links>:
	TCCR0 |= (1<<CS02) | (1<<CS00); // Stelt de prescaler in op 1024. Dan moet de OCA op 77.
	OCR0 = 77; // OUtput compare ingesteld op 77 (80000/1024)
}

void toggle_links(){
	if (timert(0)){
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 a5 00 	call	0x14a	; 0x14a <timert>
 178:	88 23       	and	r24, r24
 17a:	19 f0       	breq	.+6      	; 0x182 <toggle_links+0x12>
		PORTB ^= (1<<PINB7);
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	80 58       	subi	r24, 0x80	; 128
 180:	88 bb       	out	0x18, r24	; 24
 182:	08 95       	ret

00000184 <toggle_rechts>:
	}
}

void toggle_rechts(){
	if (timert(0)){
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 a5 00 	call	0x14a	; 0x14a <timert>
 18c:	88 23       	and	r24, r24
 18e:	21 f0       	breq	.+8      	; 0x198 <toggle_rechts+0x14>
		PORTC ^= (1<<PINC4);
 190:	95 b3       	in	r25, 0x15	; 21
 192:	80 e1       	ldi	r24, 0x10	; 16
 194:	89 27       	eor	r24, r25
 196:	85 bb       	out	0x15, r24	; 21
 198:	08 95       	ret

0000019a <rijden>:
    UBRRL = 12; //baudrade 38.4K. voor robotloader
}

void rijden (char x) {

    switch(x) {
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	f1 97       	sbiw	r30, 0x31	; 49
 1a0:	e7 34       	cpi	r30, 0x47	; 71
 1a2:	f1 05       	cpc	r31, r1
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <rijden+0xe>
 1a6:	3f c0       	rjmp	.+126    	; 0x226 <rijden+0x8c>
 1a8:	e6 5d       	subi	r30, 0xD6	; 214
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	0c 94 82 01 	jmp	0x304	; 0x304 <__tablejump2__>
    case 'w':
		TWDR = '^';
 1b0:	8e e5       	ldi	r24, 0x5E	; 94
 1b2:	83 b9       	out	0x03, r24	; 3
        PORTC &= ~(1 << PINC2);
 1b4:	aa 98       	cbi	0x15, 2	; 21
        PORTC &= ~(1 << PINC3);
 1b6:	ab 98       	cbi	0x15, 3	; 21
		knipper_licht_uit();
 1b8:	0e 94 a2 00 	call	0x144	; 0x144 <knipper_licht_uit>
        break;
 1bc:	08 95       	ret
    case 'a':
        PORTC |= (1 << PINC2);
 1be:	aa 9a       	sbi	0x15, 2	; 21
        PORTC &= ~(1 << PINC3);
 1c0:	ab 98       	cbi	0x15, 3	; 21
		toggle_links();
 1c2:	0e 94 b8 00 	call	0x170	; 0x170 <toggle_links>
		TWDR = '<';
 1c6:	8c e3       	ldi	r24, 0x3C	; 60
 1c8:	83 b9       	out	0x03, r24	; 3
        break;
 1ca:	08 95       	ret
    case 's':
        PORTC |= (1 << PINC2);
 1cc:	aa 9a       	sbi	0x15, 2	; 21
        PORTC |= (1 << PINC3);
 1ce:	ab 9a       	sbi	0x15, 3	; 21
		knipper_licht_uit();
 1d0:	0e 94 a2 00 	call	0x144	; 0x144 <knipper_licht_uit>
		TWDR = '.';
 1d4:	8e e2       	ldi	r24, 0x2E	; 46
 1d6:	83 b9       	out	0x03, r24	; 3
        break;
 1d8:	08 95       	ret
    case 'd':
        PORTC &= ~(1 << PINC2);
 1da:	aa 98       	cbi	0x15, 2	; 21
        PORTC |= (1 << PINC3);
 1dc:	ab 9a       	sbi	0x15, 3	; 21
		toggle_rechts();
 1de:	0e 94 c2 00 	call	0x184	; 0x184 <toggle_rechts>
		TWDR = '>';
 1e2:	8e e3       	ldi	r24, 0x3E	; 62
 1e4:	83 b9       	out	0x03, r24	; 3
        break;
 1e6:	08 95       	ret
    case '1':
        OCR1A = 50;
 1e8:	82 e3       	ldi	r24, 0x32	; 50
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	9b bd       	out	0x2b, r25	; 43
 1ee:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 50;
 1f0:	99 bd       	out	0x29, r25	; 41
 1f2:	88 bd       	out	0x28, r24	; 40
        break;
 1f4:	08 95       	ret
    case '2':
        OCR1A = 125;
 1f6:	8d e7       	ldi	r24, 0x7D	; 125
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	9b bd       	out	0x2b, r25	; 43
 1fc:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 125;
 1fe:	99 bd       	out	0x29, r25	; 41
 200:	88 bd       	out	0x28, r24	; 40
        break;
 202:	08 95       	ret
    case '3':
        OCR1A = 150;
 204:	86 e9       	ldi	r24, 0x96	; 150
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	9b bd       	out	0x2b, r25	; 43
 20a:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 150;
 20c:	99 bd       	out	0x29, r25	; 41
 20e:	88 bd       	out	0x28, r24	; 40
        break;
 210:	08 95       	ret
    case 'q':
        OCR1A = 0;
 212:	1b bc       	out	0x2b, r1	; 43
 214:	1a bc       	out	0x2a, r1	; 42
        OCR1B = 0;
 216:	19 bc       	out	0x29, r1	; 41
 218:	18 bc       	out	0x28, r1	; 40
	case '8':
		OCR1A = 0;
 21a:	1b bc       	out	0x2b, r1	; 43
 21c:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
 21e:	19 bc       	out	0x29, r1	; 41
 220:	18 bc       	out	0x28, r1	; 40
		TWDR = 'X';
 222:	88 e5       	ldi	r24, 0x58	; 88
 224:	83 b9       	out	0x03, r24	; 3
 226:	08 95       	ret

00000228 <__vector_19>:
			       // OCR1B = 50;
        }
    return 0;
}

ISR(TWI_vect) {
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
	
	switch(TWSR) {
 24a:	81 b1       	in	r24, 0x01	; 1
 24c:	88 3a       	cpi	r24, 0xA8	; 168
 24e:	a1 f0       	breq	.+40     	; 0x278 <__vector_19+0x50>
 250:	28 f4       	brcc	.+10     	; 0x25c <__vector_19+0x34>
 252:	80 38       	cpi	r24, 0x80	; 128
 254:	41 f0       	breq	.+16     	; 0x266 <__vector_19+0x3e>
 256:	80 3a       	cpi	r24, 0xA0	; 160
 258:	51 f0       	breq	.+20     	; 0x26e <__vector_19+0x46>
 25a:	1a c0       	rjmp	.+52     	; 0x290 <__vector_19+0x68>
 25c:	88 3b       	cpi	r24, 0xB8	; 184
 25e:	89 f0       	breq	.+34     	; 0x282 <__vector_19+0x5a>
 260:	80 3c       	cpi	r24, 0xC0	; 192
 262:	a1 f0       	breq	.+40     	; 0x28c <__vector_19+0x64>
 264:	15 c0       	rjmp	.+42     	; 0x290 <__vector_19+0x68>
		// Slave Receiver mode
		case 0x60: // Own SLA+W has been received; ACK has been returned
		break;
		case 0x80: // Addressed with own SLA+W; data received; ACK send
		x = TWDR; break; 
 266:	83 b1       	in	r24, 0x03	; 3
 268:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <x>
 26c:	11 c0       	rjmp	.+34     	; 0x290 <__vector_19+0x68>
		case 0xA0: // A STOP or repeated START condition has been received
		y = x; break;
 26e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <x>
 272:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <y>
 276:	0c c0       	rjmp	.+24     	; 0x290 <__vector_19+0x68>
		// Slave Transmitter mode
		case 0xA8: // Own SLA+R has been received; ACK has been returned
		rijden(y); break;
 278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <y>
 27c:	0e 94 cd 00 	call	0x19a	; 0x19a <rijden>
 280:	07 c0       	rjmp	.+14     	; 0x290 <__vector_19+0x68>
		case 0xB8: // Data byte in TWDR has been send; ACK has been received
		rijden(y); break;
 282:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <y>
 286:	0e 94 cd 00 	call	0x19a	; 0x19a <rijden>
 28a:	02 c0       	rjmp	.+4      	; 0x290 <__vector_19+0x68>
		case 0xC0: // Data byte in TWDR has been send; NACK has been received
		y = 0; break;
 28c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <y>
	}
	TWCR |= (1<<TWINT); // Clear TWINT Flag
 290:	86 b7       	in	r24, 0x36	; 54
 292:	80 68       	ori	r24, 0x80	; 128
 294:	86 bf       	out	0x36, r24	; 54
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_10>:

	return 0;
}

ISR(TIMER0_COMP_vect) // Interrupt Service Routine
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
	timert(1);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 a5 00 	call	0x14a	; 0x14a <timert>
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__tablejump2__>:
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	05 90       	lpm	r0, Z+
 30a:	f4 91       	lpm	r31, Z
 30c:	e0 2d       	mov	r30, r0
 30e:	09 94       	ijmp

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
