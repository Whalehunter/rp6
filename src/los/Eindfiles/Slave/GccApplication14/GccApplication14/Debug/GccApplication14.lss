
GccApplication14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000988  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066f  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c1  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003df  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_10>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	be 00       	.word	0x00be	; ????
  56:	c5 00       	.word	0x00c5	; ????
  58:	cc 00       	.word	0x00cc	; ????
  5a:	dd 00       	.word	0x00dd	; ????
  5c:	dd 00       	.word	0x00dd	; ????
  5e:	dd 00       	.word	0x00dd	; ????
  60:	dd 00       	.word	0x00dd	; ????
  62:	d7 00       	.word	0x00d7	; ????
  64:	dd 00       	.word	0x00dd	; ????
  66:	dd 00       	.word	0x00dd	; ????
  68:	dd 00       	.word	0x00dd	; ????
  6a:	dd 00       	.word	0x00dd	; ????
  6c:	dd 00       	.word	0x00dd	; ????
  6e:	dd 00       	.word	0x00dd	; ????
  70:	dd 00       	.word	0x00dd	; ????
  72:	dd 00       	.word	0x00dd	; ????
  74:	dd 00       	.word	0x00dd	; ????
  76:	dd 00       	.word	0x00dd	; ????
  78:	dd 00       	.word	0x00dd	; ????
  7a:	dd 00       	.word	0x00dd	; ????
  7c:	dd 00       	.word	0x00dd	; ????
  7e:	dd 00       	.word	0x00dd	; ????
  80:	dd 00       	.word	0x00dd	; ????
  82:	dd 00       	.word	0x00dd	; ????
  84:	dd 00       	.word	0x00dd	; ????
  86:	dd 00       	.word	0x00dd	; ????
  88:	dd 00       	.word	0x00dd	; ????
  8a:	dd 00       	.word	0x00dd	; ????
  8c:	dd 00       	.word	0x00dd	; ????
  8e:	dd 00       	.word	0x00dd	; ????
  90:	dd 00       	.word	0x00dd	; ????
  92:	dd 00       	.word	0x00dd	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	dd 00       	.word	0x00dd	; ????
  98:	dd 00       	.word	0x00dd	; ????
  9a:	dd 00       	.word	0x00dd	; ????
  9c:	dd 00       	.word	0x00dd	; ????
  9e:	dd 00       	.word	0x00dd	; ????
  a0:	dd 00       	.word	0x00dd	; ????
  a2:	dd 00       	.word	0x00dd	; ????
  a4:	dd 00       	.word	0x00dd	; ????
  a6:	dd 00       	.word	0x00dd	; ????
  a8:	dd 00       	.word	0x00dd	; ????
  aa:	dd 00       	.word	0x00dd	; ????
  ac:	dd 00       	.word	0x00dd	; ????
  ae:	dd 00       	.word	0x00dd	; ????
  b0:	dd 00       	.word	0x00dd	; ????
  b2:	dd 00       	.word	0x00dd	; ????
  b4:	9f 00       	.word	0x009f	; ????
  b6:	dd 00       	.word	0x00dd	; ????
  b8:	dd 00       	.word	0x00dd	; ????
  ba:	b3 00       	.word	0x00b3	; ????
  bc:	dd 00       	.word	0x00dd	; ????
  be:	dd 00       	.word	0x00dd	; ????
  c0:	dd 00       	.word	0x00dd	; ????
  c2:	dd 00       	.word	0x00dd	; ????
  c4:	dd 00       	.word	0x00dd	; ????
  c6:	dd 00       	.word	0x00dd	; ????
  c8:	dd 00       	.word	0x00dd	; ????
  ca:	dd 00       	.word	0x00dd	; ????
  cc:	dd 00       	.word	0x00dd	; ????
  ce:	dd 00       	.word	0x00dd	; ????
  d0:	dd 00       	.word	0x00dd	; ????
  d2:	dd 00       	.word	0x00dd	; ????
  d4:	d3 00       	.word	0x00d3	; ????
  d6:	dd 00       	.word	0x00dd	; ????
  d8:	aa 00       	.word	0x00aa	; ????
  da:	dd 00       	.word	0x00dd	; ????
  dc:	dd 00       	.word	0x00dd	; ????
  de:	dd 00       	.word	0x00dd	; ????
  e0:	96 00       	.word	0x0096	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf e5       	ldi	r28, 0x5F	; 95
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_clear_bss>:
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	a0 e6       	ldi	r26, 0x60	; 96
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a5 36       	cpi	r26, 0x65	; 101
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
 102:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <i2c_slave_init>:

		return 0;
	}
	
	return richting;
}
 10a:	11 b8       	out	0x01, r1	; 1
 10c:	80 e7       	ldi	r24, 0x70	; 112
 10e:	82 b9       	out	0x02, r24	; 2
 110:	85 e4       	ldi	r24, 0x45	; 69
 112:	86 bf       	out	0x36, r24	; 54
 114:	08 95       	ret

00000116 <rijden>:
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	f1 97       	sbiw	r30, 0x31	; 49
 11c:	e7 34       	cpi	r30, 0x47	; 71
 11e:	f1 05       	cpc	r31, r1
 120:	08 f0       	brcs	.+2      	; 0x124 <rijden+0xe>
 122:	4b c0       	rjmp	.+150    	; 0x1ba <rijden+0xa4>
 124:	e6 5d       	subi	r30, 0xD6	; 214
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__tablejump2__>
 12c:	8e e5       	ldi	r24, 0x5E	; 94
 12e:	83 b9       	out	0x03, r24	; 3
 130:	aa 98       	cbi	0x15, 2	; 21
 132:	ab 98       	cbi	0x15, 3	; 21
 134:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 138:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 13c:	08 95       	ret
 13e:	aa 9a       	sbi	0x15, 2	; 21
 140:	ab 98       	cbi	0x15, 3	; 21
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 14e:	8c e3       	ldi	r24, 0x3C	; 60
 150:	83 b9       	out	0x03, r24	; 3
 152:	08 95       	ret
 154:	aa 9a       	sbi	0x15, 2	; 21
 156:	ab 9a       	sbi	0x15, 3	; 21
 158:	8e e2       	ldi	r24, 0x2E	; 46
 15a:	83 b9       	out	0x03, r24	; 3
 15c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 160:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 164:	08 95       	ret
 166:	aa 98       	cbi	0x15, 2	; 21
 168:	ab 9a       	sbi	0x15, 3	; 21
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 176:	8e e3       	ldi	r24, 0x3E	; 62
 178:	83 b9       	out	0x03, r24	; 3
 17a:	08 95       	ret
 17c:	82 e3       	ldi	r24, 0x32	; 50
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9b bd       	out	0x2b, r25	; 43
 182:	8a bd       	out	0x2a, r24	; 42
 184:	99 bd       	out	0x29, r25	; 41
 186:	88 bd       	out	0x28, r24	; 40
 188:	08 95       	ret
 18a:	8d e7       	ldi	r24, 0x7D	; 125
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	9b bd       	out	0x2b, r25	; 43
 190:	8a bd       	out	0x2a, r24	; 42
 192:	99 bd       	out	0x29, r25	; 41
 194:	88 bd       	out	0x28, r24	; 40
 196:	08 95       	ret
 198:	86 e9       	ldi	r24, 0x96	; 150
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	9b bd       	out	0x2b, r25	; 43
 19e:	8a bd       	out	0x2a, r24	; 42
 1a0:	99 bd       	out	0x29, r25	; 41
 1a2:	88 bd       	out	0x28, r24	; 40
 1a4:	08 95       	ret
 1a6:	1b bc       	out	0x2b, r1	; 43
 1a8:	1a bc       	out	0x2a, r1	; 42
 1aa:	19 bc       	out	0x29, r1	; 41
 1ac:	18 bc       	out	0x28, r1	; 40
 1ae:	1b bc       	out	0x2b, r1	; 43
 1b0:	1a bc       	out	0x2a, r1	; 42
 1b2:	19 bc       	out	0x29, r1	; 41
 1b4:	18 bc       	out	0x28, r1	; 40
 1b6:	88 e5       	ldi	r24, 0x58	; 88
 1b8:	83 b9       	out	0x03, r24	; 3
 1ba:	08 95       	ret

000001bc <__vector_19>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
 1de:	81 b1       	in	r24, 0x01	; 1
 1e0:	88 3a       	cpi	r24, 0xA8	; 168
 1e2:	a1 f0       	breq	.+40     	; 0x20c <__vector_19+0x50>
 1e4:	28 f4       	brcc	.+10     	; 0x1f0 <__vector_19+0x34>
 1e6:	80 38       	cpi	r24, 0x80	; 128
 1e8:	41 f0       	breq	.+16     	; 0x1fa <__vector_19+0x3e>
 1ea:	80 3a       	cpi	r24, 0xA0	; 160
 1ec:	51 f0       	breq	.+20     	; 0x202 <__vector_19+0x46>
 1ee:	1a c0       	rjmp	.+52     	; 0x224 <__vector_19+0x68>
 1f0:	88 3b       	cpi	r24, 0xB8	; 184
 1f2:	89 f0       	breq	.+34     	; 0x216 <__vector_19+0x5a>
 1f4:	80 3c       	cpi	r24, 0xC0	; 192
 1f6:	a1 f0       	breq	.+40     	; 0x220 <__vector_19+0x64>
 1f8:	15 c0       	rjmp	.+42     	; 0x224 <__vector_19+0x68>
 1fa:	83 b1       	in	r24, 0x03	; 3
 1fc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <x>
 200:	11 c0       	rjmp	.+34     	; 0x224 <__vector_19+0x68>
 202:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <x>
 206:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <y>
 20a:	0c c0       	rjmp	.+24     	; 0x224 <__vector_19+0x68>
 20c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 210:	0e 94 8b 00 	call	0x116	; 0x116 <rijden>
 214:	07 c0       	rjmp	.+14     	; 0x224 <__vector_19+0x68>
 216:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 21a:	0e 94 8b 00 	call	0x116	; 0x116 <rijden>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <__vector_19+0x68>
 220:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <y>
 224:	86 b7       	in	r24, 0x36	; 54
 226:	80 68       	ori	r24, 0x80	; 128
 228:	86 bf       	out	0x36, r24	; 54
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <init>:
 24c:	1d bc       	out	0x2d, r1	; 45
 24e:	1c bc       	out	0x2c, r1	; 44
 250:	8f b5       	in	r24, 0x2f	; 47
 252:	82 6a       	ori	r24, 0xA2	; 162
 254:	8f bd       	out	0x2f, r24	; 47
 256:	8e b5       	in	r24, 0x2e	; 46
 258:	81 61       	ori	r24, 0x11	; 17
 25a:	8e bd       	out	0x2e, r24	; 46
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	97 bd       	out	0x27, r25	; 39
 262:	86 bd       	out	0x26, r24	; 38
 264:	84 b3       	in	r24, 0x14	; 20
 266:	8c 60       	ori	r24, 0x0C	; 12
 268:	84 bb       	out	0x14, r24	; 20
 26a:	08 95       	ret

0000026c <init_leds>:
 26c:	bf 9a       	sbi	0x17, 7	; 23
 26e:	a4 9a       	sbi	0x14, 4	; 20
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	89 bf       	out	0x39, r24	; 57
 274:	83 b7       	in	r24, 0x33	; 51
 276:	88 61       	ori	r24, 0x18	; 24
 278:	83 bf       	out	0x33, r24	; 51
 27a:	83 b7       	in	r24, 0x33	; 51
 27c:	85 60       	ori	r24, 0x05	; 5
 27e:	83 bf       	out	0x33, r24	; 51
 280:	8d e4       	ldi	r24, 0x4D	; 77
 282:	8c bf       	out	0x3c, r24	; 60
 284:	08 95       	ret

00000286 <timert>:
 286:	89 2b       	or	r24, r25
 288:	39 f0       	breq	.+14     	; 0x298 <timert+0x12>
 28a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <delay.1663>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <delay.1663>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
 298:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <delay.1663>
 29c:	84 31       	cpi	r24, 0x14	; 20
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <timert+0x22>
 2a0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <delay.1663>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	08 95       	ret
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret

000002ac <toggle_links>:
 2ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	91 05       	cpc	r25, r1
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <toggle_links+0x24>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 43 01 	call	0x286	; 0x286 <timert>
 2c2:	88 23       	and	r24, r24
 2c4:	41 f0       	breq	.+16     	; 0x2d6 <toggle_links+0x2a>
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	80 58       	subi	r24, 0x80	; 128
 2ca:	88 bb       	out	0x18, r24	; 24
 2cc:	ac 98       	cbi	0x15, 4	; 21
 2ce:	08 95       	ret
 2d0:	89 2b       	or	r24, r25
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <toggle_links+0x2a>
 2d4:	c7 98       	cbi	0x18, 7	; 24
 2d6:	08 95       	ret

000002d8 <toggle_rechts>:
 2d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2dc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	91 05       	cpc	r25, r1
 2e4:	61 f4       	brne	.+24     	; 0x2fe <toggle_rechts+0x26>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 43 01 	call	0x286	; 0x286 <timert>
 2ee:	88 23       	and	r24, r24
 2f0:	49 f0       	breq	.+18     	; 0x304 <toggle_rechts+0x2c>
 2f2:	95 b3       	in	r25, 0x15	; 21
 2f4:	80 e1       	ldi	r24, 0x10	; 16
 2f6:	89 27       	eor	r24, r25
 2f8:	85 bb       	out	0x15, r24	; 21
 2fa:	c7 98       	cbi	0x18, 7	; 24
 2fc:	08 95       	ret
 2fe:	89 2b       	or	r24, r25
 300:	09 f4       	brne	.+2      	; 0x304 <toggle_rechts+0x2c>
 302:	ac 98       	cbi	0x15, 4	; 21
 304:	08 95       	ret

00000306 <__vector_10>:

ISR(TIMER0_COMP_vect) // Interrupt Service Routine
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
	timert(1);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 43 01 	call	0x286	; 0x286 <timert>
}
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <BumperStatusLinks>:


int BumperStatusLinks()
{

	int DDRBcurrent = DDRB;
 352:	27 b3       	in	r18, 0x17	; 23
	int PORTBcurrent = PORTB;
 354:	98 b3       	in	r25, 0x18	; 24
	DDRB &= ~(1 << PINB0);
 356:	b8 98       	cbi	0x17, 0	; 23

	PORTB &= ~(1 << PINB0);
 358:	c0 98       	cbi	0x18, 0	; 24
	asm("nop");
 35a:	00 00       	nop


	int BumperTriggerLinks = PINB & (1 << PINB0);
 35c:	86 b3       	in	r24, 0x16	; 22

	DDRB = DDRBcurrent;
 35e:	27 bb       	out	0x17, r18	; 23
	PORTB = PORTBcurrent;
 360:	98 bb       	out	0x18, r25	; 24
	
	if (BumperTriggerLinks)
 362:	80 ff       	sbrs	r24, 0
 364:	05 c0       	rjmp	.+10     	; 0x370 <BumperStatusLinks+0x1e>
	{
		PORTC |= (1 << PINC2);
 366:	aa 9a       	sbi	0x15, 2	; 21
		PORTC |= (1 << PINC3);
 368:	ab 9a       	sbi	0x15, 3	; 21
		return 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	08 95       	ret
	}
	return 0;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
}
 374:	08 95       	ret

00000376 <BumperStatusRechts>:

int BumperStatusRechts()
{

	int DDRCcurrent = DDRC;
 376:	24 b3       	in	r18, 0x14	; 20
	int PORTCcurrent = PORTC;
 378:	95 b3       	in	r25, 0x15	; 21
	DDRC &= ~(1 << PINC6);
 37a:	a6 98       	cbi	0x14, 6	; 20
	PORTC &= ~(1 << PINC6);
 37c:	ae 98       	cbi	0x15, 6	; 21
	asm("nop");
 37e:	00 00       	nop

	int BumperTriggerRechts = PINC & (1 << PINC6);
 380:	83 b3       	in	r24, 0x13	; 19

	DDRC = DDRCcurrent;
 382:	24 bb       	out	0x14, r18	; 20
	PORTC = PORTCcurrent;
 384:	95 bb       	out	0x15, r25	; 21
	if (BumperTriggerRechts)
 386:	86 ff       	sbrs	r24, 6
 388:	05 c0       	rjmp	.+10     	; 0x394 <BumperStatusRechts+0x1e>
	{
		/* PORTC |= (1 << PINC2);
		PORTC |= (1 << PINC3);*/
		TWDR = 's';
 38a:	83 e7       	ldi	r24, 0x73	; 115
 38c:	83 b9       	out	0x03, r24	; 3
		return 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	08 95       	ret
	}
	return 0;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
}
 398:	08 95       	ret

0000039a <main>:

char x,y;

int main (void){
    // Initialisers
    cli();
 39a:	f8 94       	cli
    init();
 39c:	0e 94 26 01 	call	0x24c	; 0x24c <init>
	init_leds();
 3a0:	0e 94 36 01 	call	0x26c	; 0x26c <init_leds>
    //init_usart();
    sei();
 3a4:	78 94       	sei
	i2c_slave_init();
 3a6:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_slave_init>

    while(1)
        {
			     //   OCR1A = 50;
			       // OCR1B = 50;
				   toggle_rechts();
 3aa:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <toggle_rechts>
				   toggle_links();
 3ae:	0e 94 56 01 	call	0x2ac	; 0x2ac <toggle_links>
				   BumperStatusRechts();
 3b2:	0e 94 bb 01 	call	0x376	; 0x376 <BumperStatusRechts>
				   BumperStatusLinks();
 3b6:	0e 94 a9 01 	call	0x352	; 0x352 <BumperStatusLinks>
 3ba:	f7 cf       	rjmp	.-18     	; 0x3aa <main+0x10>

000003bc <__tablejump2__>:
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	05 90       	lpm	r0, Z+
 3c2:	f4 91       	lpm	r31, Z
 3c4:	e0 2d       	mov	r30, r0
 3c6:	09 94       	ijmp

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
