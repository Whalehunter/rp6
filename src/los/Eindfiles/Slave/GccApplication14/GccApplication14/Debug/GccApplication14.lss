
GccApplication14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064b  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000570  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000353  00000000  00000000  00000f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000311  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	a9 00       	.word	0x00a9	; ????
  56:	b0 00       	.word	0x00b0	; ????
  58:	b7 00       	.word	0x00b7	; ????
  5a:	c8 00       	.word	0x00c8	; ????
  5c:	c8 00       	.word	0x00c8	; ????
  5e:	c8 00       	.word	0x00c8	; ????
  60:	c8 00       	.word	0x00c8	; ????
  62:	c2 00       	.word	0x00c2	; ????
  64:	c8 00       	.word	0x00c8	; ????
  66:	c8 00       	.word	0x00c8	; ????
  68:	c8 00       	.word	0x00c8	; ????
  6a:	c8 00       	.word	0x00c8	; ????
  6c:	c8 00       	.word	0x00c8	; ????
  6e:	c8 00       	.word	0x00c8	; ????
  70:	c8 00       	.word	0x00c8	; ????
  72:	c8 00       	.word	0x00c8	; ????
  74:	c8 00       	.word	0x00c8	; ????
  76:	c8 00       	.word	0x00c8	; ????
  78:	c8 00       	.word	0x00c8	; ????
  7a:	c8 00       	.word	0x00c8	; ????
  7c:	c8 00       	.word	0x00c8	; ????
  7e:	c8 00       	.word	0x00c8	; ????
  80:	c8 00       	.word	0x00c8	; ????
  82:	c8 00       	.word	0x00c8	; ????
  84:	c8 00       	.word	0x00c8	; ????
  86:	c8 00       	.word	0x00c8	; ????
  88:	c8 00       	.word	0x00c8	; ????
  8a:	c8 00       	.word	0x00c8	; ????
  8c:	c8 00       	.word	0x00c8	; ????
  8e:	c8 00       	.word	0x00c8	; ????
  90:	c8 00       	.word	0x00c8	; ????
  92:	c8 00       	.word	0x00c8	; ????
  94:	c8 00       	.word	0x00c8	; ????
  96:	c8 00       	.word	0x00c8	; ????
  98:	c8 00       	.word	0x00c8	; ????
  9a:	c8 00       	.word	0x00c8	; ????
  9c:	c8 00       	.word	0x00c8	; ????
  9e:	c8 00       	.word	0x00c8	; ????
  a0:	c8 00       	.word	0x00c8	; ????
  a2:	c8 00       	.word	0x00c8	; ????
  a4:	c8 00       	.word	0x00c8	; ????
  a6:	c8 00       	.word	0x00c8	; ????
  a8:	c8 00       	.word	0x00c8	; ????
  aa:	c8 00       	.word	0x00c8	; ????
  ac:	c8 00       	.word	0x00c8	; ????
  ae:	c8 00       	.word	0x00c8	; ????
  b0:	c8 00       	.word	0x00c8	; ????
  b2:	c8 00       	.word	0x00c8	; ????
  b4:	9a 00       	.word	0x009a	; ????
  b6:	c8 00       	.word	0x00c8	; ????
  b8:	c8 00       	.word	0x00c8	; ????
  ba:	a4 00       	.word	0x00a4	; ????
  bc:	c8 00       	.word	0x00c8	; ????
  be:	c8 00       	.word	0x00c8	; ????
  c0:	c8 00       	.word	0x00c8	; ????
  c2:	c8 00       	.word	0x00c8	; ????
  c4:	c8 00       	.word	0x00c8	; ????
  c6:	c8 00       	.word	0x00c8	; ????
  c8:	c8 00       	.word	0x00c8	; ????
  ca:	c8 00       	.word	0x00c8	; ????
  cc:	c8 00       	.word	0x00c8	; ????
  ce:	c8 00       	.word	0x00c8	; ????
  d0:	c8 00       	.word	0x00c8	; ????
  d2:	c8 00       	.word	0x00c8	; ????
  d4:	be 00       	.word	0x00be	; ????
  d6:	c8 00       	.word	0x00c8	; ????
  d8:	9f 00       	.word	0x009f	; ????
  da:	c8 00       	.word	0x00c8	; ????
  dc:	c8 00       	.word	0x00c8	; ????
  de:	c8 00       	.word	0x00c8	; ????
  e0:	95 00       	.word	0x0095	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf e5       	ldi	r28, 0x5F	; 95
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_clear_bss>:
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	a0 e6       	ldi	r26, 0x60	; 96
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a2 36       	cpi	r26, 0x62	; 98
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 21 01 	call	0x242	; 0x242 <main>
 102:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <i2c_slave_init>:
void init_usart(){
    UCSRA = 0; // USART status and control registerA uit
    UCSRB = (1 << RXEN) | (1 << RXCIE); // Enable de USART Reciever
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); /* 8 data bits, 1 stop bit */
    UBRRH = 00;
    UBRRL = 12; //baudrade 38.4K. voor robotloader
 10a:	11 b8       	out	0x01, r1	; 1
 10c:	80 e7       	ldi	r24, 0x70	; 112
 10e:	82 b9       	out	0x02, r24	; 2
 110:	85 e4       	ldi	r24, 0x45	; 69
 112:	86 bf       	out	0x36, r24	; 54
 114:	08 95       	ret

00000116 <rijden>:
}

void rijden (char x) {

    switch(x) {
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	f1 97       	sbiw	r30, 0x31	; 49
 11c:	e7 34       	cpi	r30, 0x47	; 71
 11e:	f1 05       	cpc	r31, r1
 120:	b8 f5       	brcc	.+110    	; 0x190 <rijden+0x7a>
 122:	e6 5d       	subi	r30, 0xD6	; 214
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	0c 94 28 01 	jmp	0x250	; 0x250 <__tablejump2__>
    case 'w':
		TWDR = '^';
 12a:	8e e5       	ldi	r24, 0x5E	; 94
 12c:	83 b9       	out	0x03, r24	; 3
        PORTC &= ~(1 << PINC2);
 12e:	aa 98       	cbi	0x15, 2	; 21
        PORTC &= ~(1 << PINC3);
 130:	ab 98       	cbi	0x15, 3	; 21
        break;
 132:	08 95       	ret
    case 'a':
        PORTC |= (1 << PINC2);
 134:	aa 9a       	sbi	0x15, 2	; 21
        PORTC &= ~(1 << PINC3);
 136:	ab 98       	cbi	0x15, 3	; 21
		TWDR = '<';
 138:	8c e3       	ldi	r24, 0x3C	; 60
 13a:	83 b9       	out	0x03, r24	; 3
        break;
 13c:	08 95       	ret
    case 's':
        PORTC |= (1 << PINC2);
 13e:	aa 9a       	sbi	0x15, 2	; 21
        PORTC |= (1 << PINC3);
 140:	ab 9a       	sbi	0x15, 3	; 21
		TWDR = '.';
 142:	8e e2       	ldi	r24, 0x2E	; 46
 144:	83 b9       	out	0x03, r24	; 3
        break;
 146:	08 95       	ret
    case 'd':
        PORTC &= ~(1 << PINC2);
 148:	aa 98       	cbi	0x15, 2	; 21
        PORTC |= (1 << PINC3);
 14a:	ab 9a       	sbi	0x15, 3	; 21
		TWDR = '>';
 14c:	8e e3       	ldi	r24, 0x3E	; 62
 14e:	83 b9       	out	0x03, r24	; 3
        break;
 150:	08 95       	ret
    case '1':
        OCR1A = 50;
 152:	82 e3       	ldi	r24, 0x32	; 50
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	9b bd       	out	0x2b, r25	; 43
 158:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 50;
 15a:	99 bd       	out	0x29, r25	; 41
 15c:	88 bd       	out	0x28, r24	; 40
        break;
 15e:	08 95       	ret
    case '2':
        OCR1A = 125;
 160:	8d e7       	ldi	r24, 0x7D	; 125
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	9b bd       	out	0x2b, r25	; 43
 166:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 125;
 168:	99 bd       	out	0x29, r25	; 41
 16a:	88 bd       	out	0x28, r24	; 40
        break;
 16c:	08 95       	ret
    case '3':
        OCR1A = 150;
 16e:	86 e9       	ldi	r24, 0x96	; 150
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9b bd       	out	0x2b, r25	; 43
 174:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 150;
 176:	99 bd       	out	0x29, r25	; 41
 178:	88 bd       	out	0x28, r24	; 40
        break;
 17a:	08 95       	ret
    case 'q':
        OCR1A = 0;
 17c:	1b bc       	out	0x2b, r1	; 43
 17e:	1a bc       	out	0x2a, r1	; 42
        OCR1B = 0;
 180:	19 bc       	out	0x29, r1	; 41
 182:	18 bc       	out	0x28, r1	; 40
	case '8':
		OCR1A = 0;
 184:	1b bc       	out	0x2b, r1	; 43
 186:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
 188:	19 bc       	out	0x29, r1	; 41
 18a:	18 bc       	out	0x28, r1	; 40
		TWDR = 'X';
 18c:	88 e5       	ldi	r24, 0x58	; 88
 18e:	83 b9       	out	0x03, r24	; 3
 190:	08 95       	ret

00000192 <__vector_19>:
			       // OCR1B = 50;
        }
    return 0;
}

ISR(TWI_vect) {
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	
	switch(TWSR) {
 1b4:	81 b1       	in	r24, 0x01	; 1
 1b6:	88 3a       	cpi	r24, 0xA8	; 168
 1b8:	a1 f0       	breq	.+40     	; 0x1e2 <__vector_19+0x50>
 1ba:	28 f4       	brcc	.+10     	; 0x1c6 <__vector_19+0x34>
 1bc:	80 38       	cpi	r24, 0x80	; 128
 1be:	41 f0       	breq	.+16     	; 0x1d0 <__vector_19+0x3e>
 1c0:	80 3a       	cpi	r24, 0xA0	; 160
 1c2:	51 f0       	breq	.+20     	; 0x1d8 <__vector_19+0x46>
 1c4:	1a c0       	rjmp	.+52     	; 0x1fa <__vector_19+0x68>
 1c6:	88 3b       	cpi	r24, 0xB8	; 184
 1c8:	89 f0       	breq	.+34     	; 0x1ec <__vector_19+0x5a>
 1ca:	80 3c       	cpi	r24, 0xC0	; 192
 1cc:	a1 f0       	breq	.+40     	; 0x1f6 <__vector_19+0x64>
 1ce:	15 c0       	rjmp	.+42     	; 0x1fa <__vector_19+0x68>
		// Slave Receiver mode
		case 0x60: // Own SLA+W has been received; ACK has been returned
		break;
		case 0x80: // Addressed with own SLA+W; data received; ACK send
		x = TWDR; break; 
 1d0:	83 b1       	in	r24, 0x03	; 3
 1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1d6:	11 c0       	rjmp	.+34     	; 0x1fa <__vector_19+0x68>
		case 0xA0: // A STOP or repeated START condition has been received
		y = x; break;
 1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y>
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <__vector_19+0x68>
		// Slave Transmitter mode
		case 0xA8: // Own SLA+R has been received; ACK has been returned
		rijden(y); break;
 1e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y>
 1e6:	0e 94 8b 00 	call	0x116	; 0x116 <rijden>
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <__vector_19+0x68>
		case 0xB8: // Data byte in TWDR has been send; ACK has been received
		rijden(y); break;
 1ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y>
 1f0:	0e 94 8b 00 	call	0x116	; 0x116 <rijden>
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <__vector_19+0x68>
		case 0xC0: // Data byte in TWDR has been send; NACK has been received
		y = 0; break;
 1f6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <y>
	}
	TWCR |= (1<<TWINT); // Clear TWINT Flag
 1fa:	86 b7       	in	r24, 0x36	; 54
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	86 bf       	out	0x36, r24	; 54
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <init>:
}


void init()
{
    TCNT1 = 0;
 222:	1d bc       	out	0x2d, r1	; 45
 224:	1c bc       	out	0x2c, r1	; 44

    TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM11); // set output to high on compare + pwm 9-bit
 226:	8f b5       	in	r24, 0x2f	; 47
 228:	82 6a       	ori	r24, 0xA2	; 162
 22a:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM13)|(1 << CS10); // no prescaler + pwm, phase & frequency correct
 22c:	8e b5       	in	r24, 0x2e	; 46
 22e:	81 61       	ori	r24, 0x11	; 17
 230:	8e bd       	out	0x2e, r24	; 46

    ICR1 = 0x00FF; // set interrupt
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	97 bd       	out	0x27, r25	; 39
 238:	86 bd       	out	0x26, r24	; 38
    DDRC |= (1 << PINC2) | (1 << PINC3);
 23a:	84 b3       	in	r24, 0x14	; 20
 23c:	8c 60       	ori	r24, 0x0C	; 12
 23e:	84 bb       	out	0x14, r24	; 20
 240:	08 95       	ret

00000242 <main>:



int main (void){
    // Initialisers
    cli();
 242:	f8 94       	cli
    init();
 244:	0e 94 11 01 	call	0x222	; 0x222 <init>
    //init_usart();
    sei();
 248:	78 94       	sei
	i2c_slave_init();
 24a:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_slave_init>
 24e:	ff cf       	rjmp	.-2      	; 0x24e <main+0xc>

00000250 <__tablejump2__>:
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	05 90       	lpm	r0, Z+
 256:	f4 91       	lpm	r31, Z
 258:	e0 2d       	mov	r30, r0
 25a:	09 94       	ijmp

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
