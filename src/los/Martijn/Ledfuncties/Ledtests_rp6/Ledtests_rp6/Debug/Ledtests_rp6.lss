
Ledtests_rp6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000618  00000000  00000000  0000099d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000326  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001af  00000000  00000000  000016b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ledknipper_links>:


void timer(int i)
{
	TIMSK = (1<<TOIE0); // Timer overflow interrupt bitje
	TCCR0 |= (1<<COM00); // Timer control register COM00 - toggle oc0a on compare match
  6c:	28 e0       	ldi	r18, 0x08	; 8
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	88 b3       	in	r24, 0x18	; 24
  72:	80 58       	subi	r24, 0x80	; 128
  74:	88 bb       	out	0x18, r24	; 24
  76:	4f ef       	ldi	r20, 0xFF	; 255
  78:	80 e7       	ldi	r24, 0x70	; 112
  7a:	92 e0       	ldi	r25, 0x02	; 2
  7c:	41 50       	subi	r20, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <ledknipper_links+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <ledknipper_links+0x1a>
  86:	00 00       	nop
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	31 09       	sbc	r19, r1
  8c:	89 f7       	brne	.-30     	; 0x70 <ledknipper_links+0x4>
  8e:	c7 98       	cbi	0x18, 7	; 24
  90:	08 95       	ret

00000092 <ledknipper_rechts>:
  92:	28 e0       	ldi	r18, 0x08	; 8
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	90 e1       	ldi	r25, 0x10	; 16
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	89 27       	eor	r24, r25
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	4f ef       	ldi	r20, 0xFF	; 255
  a0:	50 e7       	ldi	r21, 0x70	; 112
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	41 50       	subi	r20, 0x01	; 1
  a6:	50 40       	sbci	r21, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <ledknipper_rechts+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <ledknipper_rechts+0x1c>
  ae:	00 00       	nop
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	31 09       	sbc	r19, r1
  b4:	89 f7       	brne	.-30     	; 0x98 <ledknipper_rechts+0x6>
  b6:	ac 98       	cbi	0x15, 4	; 21
  b8:	08 95       	ret

000000ba <main>:
  ba:	c7 9a       	sbi	0x18, 7	; 24
  bc:	ac 9a       	sbi	0x15, 4	; 21
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	89 bf       	out	0x39, r24	; 57
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	83 bf       	out	0x33, r24	; 51
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	83 bf       	out	0x33, r24	; 51
  cc:	8e e4       	ldi	r24, 0x4E	; 78
  ce:	8c bf       	out	0x3c, r24	; 60
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <ledknipper_links>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x20>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x2a>
  e4:	00 00       	nop
  e6:	0e 94 49 00 	call	0x92	; 0x92 <ledknipper_rechts>
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	89 e6       	ldi	r24, 0x69	; 105
  ee:	98 e1       	ldi	r25, 0x18	; 24
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x36>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x40>
  fa:	00 00       	nop
  fc:	e9 cf       	rjmp	.-46     	; 0xd0 <main+0x16>

000000fe <__vector_11>:
	
}

ISR(TIMER0_OVF_vect) // Interrupt Service Routine 
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
	
	
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
