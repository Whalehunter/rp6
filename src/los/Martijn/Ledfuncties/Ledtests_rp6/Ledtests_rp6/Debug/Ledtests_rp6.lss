
Ledtests_rp6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000312  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000066b  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000592  00000000  00000000  00000a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026f  00000000  00000000  00001031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000324  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000165  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 98 00 	call	0x130	; 0x130 <main>
  74:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle_links>:
	}
}


void toggle_links(){
		PORTB ^= (1<<PINB7);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	80 58       	subi	r24, 0x80	; 128
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret

00000084 <toggle_rechts>:
}

void toggle_rechts(){
		PORTC ^= (1<<PINC4);
  84:	95 b3       	in	r25, 0x15	; 21
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	89 27       	eor	r24, r25
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	08 95       	ret

0000008e <timert>:
}


uint64_t timert(int x)
{
  8e:	ff 92       	push	r15
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
	static uint64_t i =0;
	if (x){
  98:	89 2b       	or	r24, r25
  9a:	61 f1       	breq	.+88     	; 0xf4 <timert+0x66>
		return i++;
  9c:	f0 90 60 00 	lds	r15, 0x0060	; 0x800060 <_edata>
  a0:	00 91 61 00 	lds	r16, 0x0061	; 0x800061 <_edata+0x1>
  a4:	10 91 62 00 	lds	r17, 0x0062	; 0x800062 <_edata+0x2>
  a8:	d0 91 63 00 	lds	r29, 0x0063	; 0x800063 <_edata+0x3>
  ac:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <_edata+0x4>
  b0:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <_edata+0x5>
  b4:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <_edata+0x6>
  b8:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_edata+0x7>
  bc:	2f 2d       	mov	r18, r15
  be:	30 2f       	mov	r19, r16
  c0:	41 2f       	mov	r20, r17
  c2:	5d 2f       	mov	r21, r29
  c4:	6c 2f       	mov	r22, r28
  c6:	7b 2f       	mov	r23, r27
  c8:	8f 2f       	mov	r24, r31
  ca:	9e 2f       	mov	r25, r30
  cc:	a1 e0       	ldi	r26, 0x01	; 1
  ce:	0e 94 6f 01 	call	0x2de	; 0x2de <__adddi3_s8>
  d2:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
  d6:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
  da:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <_edata+0x2>
  de:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <_edata+0x3>
  e2:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <_edata+0x4>
  e6:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <_edata+0x5>
  ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_edata+0x6>
  ee:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <_edata+0x7>
  f2:	10 c0       	rjmp	.+32     	; 0x114 <timert+0x86>
	}
	return i;
  f4:	f0 90 60 00 	lds	r15, 0x0060	; 0x800060 <_edata>
  f8:	00 91 61 00 	lds	r16, 0x0061	; 0x800061 <_edata+0x1>
  fc:	10 91 62 00 	lds	r17, 0x0062	; 0x800062 <_edata+0x2>
 100:	d0 91 63 00 	lds	r29, 0x0063	; 0x800063 <_edata+0x3>
 104:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <_edata+0x4>
 108:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <_edata+0x5>
 10c:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <_edata+0x6>
 110:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_edata+0x7>
	
}
 114:	2f 2d       	mov	r18, r15
 116:	30 2f       	mov	r19, r16
 118:	41 2f       	mov	r20, r17
 11a:	5d 2f       	mov	r21, r29
 11c:	6c 2f       	mov	r22, r28
 11e:	7b 2f       	mov	r23, r27
 120:	8f 2f       	mov	r24, r31
 122:	9e 2f       	mov	r25, r30
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	08 95       	ret

00000130 <main>:
void toggle_rechts();


int main(void)
{
	PORTB |= 0b10000000; // Stel pb7 in als output
 130:	c7 9a       	sbi	0x18, 7	; 24
	PORTC |= 0b00010000; // Stel pc4 in als output
 132:	ac 9a       	sbi	0x15, 4	; 21
	
	// Instellen van Timer compare registers 
	TIMSK = (1<<TOIE0); // Timer overflow interrupt bitje
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<COM00); // Timer control register COM00 - toggle oc0a on compare match
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	83 bf       	out	0x33, r24	; 51
	TCCR0 = (1<<CS02) | (1<<CS00); // Stelt de prescaler in op 1024. Dan moet de OCA op 78.
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	83 bf       	out	0x33, r24	; 51
	OCR0 = 78; // OUtput compare ingesteld op 78 (80000/1024)
 142:	8e e4       	ldi	r24, 0x4E	; 78
 144:	8c bf       	out	0x3c, r24	; 60
	
	
	while (1) 
    {
		if (timert(0)%10==0){
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 47 00 	call	0x8e	; 0x8e <timert>
 14e:	0f 2e       	mov	r0, r31
 150:	fa e0       	ldi	r31, 0x0A	; 10
 152:	af 2e       	mov	r10, r31
 154:	f0 2d       	mov	r31, r0
 156:	b1 2c       	mov	r11, r1
 158:	c1 2c       	mov	r12, r1
 15a:	d1 2c       	mov	r13, r1
 15c:	e1 2c       	mov	r14, r1
 15e:	f1 2c       	mov	r15, r1
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	0e 94 10 01 	call	0x220	; 0x220 <__umoddi3>
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__cmpdi2_s8>
 16e:	11 f4       	brne	.+4      	; 0x174 <main+0x44>
			toggle_links();	
 170:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_links>
		}
		if (timert(0)%10==0){
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 47 00 	call	0x8e	; 0x8e <timert>
 17c:	0f 2e       	mov	r0, r31
 17e:	fa e0       	ldi	r31, 0x0A	; 10
 180:	af 2e       	mov	r10, r31
 182:	f0 2d       	mov	r31, r0
 184:	b1 2c       	mov	r11, r1
 186:	c1 2c       	mov	r12, r1
 188:	d1 2c       	mov	r13, r1
 18a:	e1 2c       	mov	r14, r1
 18c:	f1 2c       	mov	r15, r1
 18e:	00 e0       	ldi	r16, 0x00	; 0
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	0e 94 10 01 	call	0x220	; 0x220 <__umoddi3>
 196:	a0 e0       	ldi	r26, 0x00	; 0
 198:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__cmpdi2_s8>
 19c:	11 f4       	brne	.+4      	; 0x1a2 <main+0x72>
			toggle_rechts();
 19e:	0e 94 42 00 	call	0x84	; 0x84 <toggle_rechts>
		}
		if (timert(0)%100==0){
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 47 00 	call	0x8e	; 0x8e <timert>
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f4 e6       	ldi	r31, 0x64	; 100
 1ae:	af 2e       	mov	r10, r31
 1b0:	f0 2d       	mov	r31, r0
 1b2:	b1 2c       	mov	r11, r1
 1b4:	c1 2c       	mov	r12, r1
 1b6:	d1 2c       	mov	r13, r1
 1b8:	e1 2c       	mov	r14, r1
 1ba:	f1 2c       	mov	r15, r1
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	0e 94 10 01 	call	0x220	; 0x220 <__umoddi3>
 1c4:	a0 e0       	ldi	r26, 0x00	; 0
 1c6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__cmpdi2_s8>
 1ca:	09 f0       	breq	.+2      	; 0x1ce <main+0x9e>
 1cc:	bc cf       	rjmp	.-136    	; 0x146 <main+0x16>
			PORTB &= ~(1<<PINB7);
 1ce:	c7 98       	cbi	0x18, 7	; 24
			PORTC &= ~(1<<PINC4); 
 1d0:	ac 98       	cbi	0x15, 4	; 21
 1d2:	b9 cf       	rjmp	.-142    	; 0x146 <main+0x16>

000001d4 <__vector_11>:
	return i;
	
}

ISR(TIMER0_OVF_vect) // Interrupt Service Routine 
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	timert(1);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 47 00 	call	0x8e	; 0x8e <timert>
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__umoddi3>:
 220:	68 94       	set
 222:	01 c0       	rjmp	.+2      	; 0x226 <__udivdi3_umoddi3>

00000224 <__udivdi3>:
 224:	e8 94       	clt

00000226 <__udivdi3_umoddi3>:
 226:	8f 92       	push	r8
 228:	9f 92       	push	r9
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmod64>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	9f 90       	pop	r9
 238:	8f 90       	pop	r8
 23a:	08 95       	ret

0000023c <__udivmod64>:
 23c:	88 24       	eor	r8, r8
 23e:	99 24       	eor	r9, r9
 240:	f4 01       	movw	r30, r8
 242:	e4 01       	movw	r28, r8
 244:	b0 e4       	ldi	r27, 0x40	; 64
 246:	9f 93       	push	r25
 248:	aa 27       	eor	r26, r26
 24a:	9a 15       	cp	r25, r10
 24c:	8b 04       	cpc	r8, r11
 24e:	9c 04       	cpc	r9, r12
 250:	ed 05       	cpc	r30, r13
 252:	fe 05       	cpc	r31, r14
 254:	cf 05       	cpc	r28, r15
 256:	d0 07       	cpc	r29, r16
 258:	a1 07       	cpc	r26, r17
 25a:	98 f4       	brcc	.+38     	; 0x282 <__udivmod64+0x46>
 25c:	ad 2f       	mov	r26, r29
 25e:	dc 2f       	mov	r29, r28
 260:	cf 2f       	mov	r28, r31
 262:	fe 2f       	mov	r31, r30
 264:	e9 2d       	mov	r30, r9
 266:	98 2c       	mov	r9, r8
 268:	89 2e       	mov	r8, r25
 26a:	98 2f       	mov	r25, r24
 26c:	87 2f       	mov	r24, r23
 26e:	76 2f       	mov	r23, r22
 270:	65 2f       	mov	r22, r21
 272:	54 2f       	mov	r21, r20
 274:	43 2f       	mov	r20, r19
 276:	32 2f       	mov	r19, r18
 278:	22 27       	eor	r18, r18
 27a:	b8 50       	subi	r27, 0x08	; 8
 27c:	31 f7       	brne	.-52     	; 0x24a <__udivmod64+0xe>
 27e:	bf 91       	pop	r27
 280:	27 c0       	rjmp	.+78     	; 0x2d0 <__udivmod64+0x94>
 282:	1b 2e       	mov	r1, r27
 284:	bf 91       	pop	r27
 286:	bb 27       	eor	r27, r27
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	44 1f       	adc	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	66 1f       	adc	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	88 1f       	adc	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 1c       	adc	r8, r8
 29a:	99 1c       	adc	r9, r9
 29c:	ee 1f       	adc	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	cc 1f       	adc	r28, r28
 2a2:	dd 1f       	adc	r29, r29
 2a4:	aa 1f       	adc	r26, r26
 2a6:	bb 1f       	adc	r27, r27
 2a8:	8a 14       	cp	r8, r10
 2aa:	9b 04       	cpc	r9, r11
 2ac:	ec 05       	cpc	r30, r12
 2ae:	fd 05       	cpc	r31, r13
 2b0:	ce 05       	cpc	r28, r14
 2b2:	df 05       	cpc	r29, r15
 2b4:	a0 07       	cpc	r26, r16
 2b6:	b1 07       	cpc	r27, r17
 2b8:	48 f0       	brcs	.+18     	; 0x2cc <__udivmod64+0x90>
 2ba:	8a 18       	sub	r8, r10
 2bc:	9b 08       	sbc	r9, r11
 2be:	ec 09       	sbc	r30, r12
 2c0:	fd 09       	sbc	r31, r13
 2c2:	ce 09       	sbc	r28, r14
 2c4:	df 09       	sbc	r29, r15
 2c6:	a0 0b       	sbc	r26, r16
 2c8:	b1 0b       	sbc	r27, r17
 2ca:	21 60       	ori	r18, 0x01	; 1
 2cc:	1a 94       	dec	r1
 2ce:	e1 f6       	brne	.-72     	; 0x288 <__udivmod64+0x4c>
 2d0:	2e f4       	brtc	.+10     	; 0x2dc <__udivmod64+0xa0>
 2d2:	94 01       	movw	r18, r8
 2d4:	af 01       	movw	r20, r30
 2d6:	be 01       	movw	r22, r28
 2d8:	cd 01       	movw	r24, r26
 2da:	00 0c       	add	r0, r0
 2dc:	08 95       	ret

000002de <__adddi3_s8>:
 2de:	00 24       	eor	r0, r0
 2e0:	a7 fd       	sbrc	r26, 7
 2e2:	00 94       	com	r0
 2e4:	2a 0f       	add	r18, r26
 2e6:	30 1d       	adc	r19, r0
 2e8:	40 1d       	adc	r20, r0
 2ea:	50 1d       	adc	r21, r0
 2ec:	60 1d       	adc	r22, r0
 2ee:	70 1d       	adc	r23, r0
 2f0:	80 1d       	adc	r24, r0
 2f2:	90 1d       	adc	r25, r0
 2f4:	08 95       	ret

000002f6 <__cmpdi2_s8>:
 2f6:	00 24       	eor	r0, r0
 2f8:	a7 fd       	sbrc	r26, 7
 2fa:	00 94       	com	r0
 2fc:	2a 17       	cp	r18, r26
 2fe:	30 05       	cpc	r19, r0
 300:	40 05       	cpc	r20, r0
 302:	50 05       	cpc	r21, r0
 304:	60 05       	cpc	r22, r0
 306:	70 05       	cpc	r23, r0
 308:	80 05       	cpc	r24, r0
 30a:	90 05       	cpc	r25, r0
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
