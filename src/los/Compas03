#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <avr/io.h>

#define F_SCL 100000UL // SCL frequency
#define F_CPU 16000000UL
#define COMPASS_AD 0x60 // I2C adress of kompas

void init_compass();
uint8_t getCompassRegister(uint8_t aRegister);
uint16_t getBearing();
void init_usart();

int main(void)
{
    init_compass();
	//init_usart();
	
    while (1) 
    {
		uint16_t robot_bearing = getBearing();
		//transmitByte(robot_bearing); // Functie transmit byte nodig
    }
}

void init_compass(){
	TWSR = 0;
	TWAR = (COMPASS_AD <<1);
	TWCR |= (1<<TWEA) | (1<<TWIE) | (1<<TWEN);
}

uint8_t getCompassRegister(uint8_t aRegister){
	// START conditie
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<< TWEN);
	while (!(TWCR & (1<<TWINT)));
	
	// Set I2C adress
	
	TWDR = (COMPASS_AD <<1);
	TWCR = (1<< TWINT) | (1<< TWEN);
	
	while (!(TWCR & (1<<TWINT)));
	
	// Select register 
	TWDR = aRegister;
	// Start write operation
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	
	// STOP condition
	TWCR = (1<< TWINT) | (1<< TWSTO) | (1<<TWEN);
	
	// START conditie
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	
	// Set I2C adress
	TWDR = (COMPASS_AD << 1 ) + 1; // Nu gaan lezen
	TWCR = (1 << TWINT) | (1<<TWEN);
	
	while (!(TWCR & (1<<TWINT)));
	
	TWCR = (1<<TWINT) | (1<< TWEN);
	while (!(TWCR & (1<<TWINT)));
	
	uint8_t received_byte = TWDR;
	uint8_t status_byte = TWSR;
	
	// STOP condition
	TWCR = (1<< TWINT) | (1<<TWSTO) | (1<<TWEN);
	
	return received_byte;
}

uint16_t getBearing(){
	// Voor hoge nauwkeurigheid register 2 en 3, HIGH byte first
	
	uint16_t bearing = 0;
	bearing = getCompassRegister(2);
	bearing = (bearing << 8); // register 2 naar high byte
	bearing = bearing + getCompassRegister(3);
	prinft("%s", richting[(bearing)])
	return bearing;
}

// String Array gemaakt om zo de omschrijving van de richting aan te geven.
const char *richting[()] = {
  "Noord",
  "Noord-Oost",
  "Oost",
  "Zuid-Oost",
  "Zuid",
  "Zuid-West",
  "West",
  "Noord-West",
  "Fout"
};
// Testen van de functie

}
// Delen van de 360 graden cirkel op in stukjes van 45graden. 
// De module geeft waardes tussen 0-3599.
// Door deze deling komen er 8 stukken vrij. Het 8ste stuk zou ook bij Noord horen, dit opgelost door
// een if aan te maken.
int test(int bearing)
{	
	if ((bearing < 0)
		|| (bearing > 3599)){
			return 8;
		}
	// 450.0 gebruikt want anders is er een integer deling en krijg je afrondings problemen.	
	float part = bearing / 450.0;
	int wijzerindex = (int)(round(part));
	if (wijzerindex == 8)
	{ 
		return 0;
	} else 
	{	
		return wijzerindex;
	}

}
