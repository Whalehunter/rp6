
Ledtests_rp6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064d  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000596  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000274  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000319  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011c  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 57 00 	call	0xae	; 0xae <main>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timert>:
	}
}

void toggle_rechts(){
	if (timert(0)){
		PORTC ^=0b00010000;
  7c:	18 16       	cp	r1, r24
  7e:	19 06       	cpc	r1, r25
  80:	2c f4       	brge	.+10     	; 0x8c <timert+0x10>
  82:	81 50       	subi	r24, 0x01	; 1
  84:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <delay.1976>
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	08 95       	ret
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <delay.1976>
  92:	9a 30       	cpi	r25, 0x0A	; 10
  94:	09 f0       	breq	.+2      	; 0x98 <timert+0x1c>
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 95       	ret

0000009a <toggle_links>:
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <timert>
  a2:	88 23       	and	r24, r24
  a4:	19 f0       	breq	.+6      	; 0xac <toggle_links+0x12>
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	80 58       	subi	r24, 0x80	; 128
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	08 95       	ret

000000ae <main>:
  ae:	78 94       	sei
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	84 bb       	out	0x14, r24	; 20
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	89 bf       	out	0x39, r24	; 57
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	83 bf       	out	0x33, r24	; 51
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	83 bf       	out	0x33, r24	; 51
  c4:	8d e4       	ldi	r24, 0x4D	; 77
  c6:	8c bf       	out	0x3c, r24	; 60
  c8:	0e 94 4d 00 	call	0x9a	; 0x9a <toggle_links>
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <main+0x1a>

000000ce <__vector_10>:
{
	timert(1);
}*/

ISR(TIMER0_COMP_vect) // Interrupt Service Routine
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	cf 93       	push	r28
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	static uint8_t tel = 0;
	tel ++;
  f2:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <_edata>
  f6:	cf 5f       	subi	r28, 0xFF	; 255
  f8:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <_edata>
	timert(tel+1);
  fc:	8c 2f       	mov	r24, r28
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 3e 00 	call	0x7c	; 0x7c <timert>
	if (tel==10){
 106:	ca 30       	cpi	r28, 0x0A	; 10
 108:	11 f4       	brne	.+4      	; 0x10e <__vector_10+0x40>
		tel=0;
 10a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	cf 91       	pop	r28
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
